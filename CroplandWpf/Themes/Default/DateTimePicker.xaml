<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:tk="http://schemas.xceed.com/wpf/xaml/toolkit"
					xmlns:a="clr-namespace:CroplandWpf.Attached">

	<Style x:Key="{x:Type tk:DateTimePicker}" TargetType="{x:Type tk:DateTimePicker}">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="CalendarWidth" Value="230"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type tk:DateTimePicker}">
					<Border>
						<Grid>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>

								<tk:ButtonSpinner Grid.Column="0" Grid.ColumnSpan="2" x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" a:VisualHelper.RightColumnGapSource="{Binding ElementName=_calendarToggleButton, Path=ActualWidth}">
									<tk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" IsTabStop="True" IsUndoEnabled="True" MinWidth="20" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" />
								</tk:ButtonSpinner>

								<ToggleButton Grid.Column="1" x:Name="_calendarToggleButton" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource styleToggleButton_TimePicker}">
									<ToggleButton.IsHitTestVisible>
										<Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
											<Binding.Converter>
												<tk:InverseBoolConverter/>
											</Binding.Converter>
										</Binding>
									</ToggleButton.IsHitTestVisible>
									<ToggleButton.IsEnabled>
										<Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
											<Binding.Converter>
												<tk:InverseBoolConverter/>
											</Binding.Converter>
										</Binding>
									</ToggleButton.IsEnabled>
									<ToggleButton.Visibility>
										<TemplateBinding Property="ShowDropDownButton">
											<TemplateBinding.Converter>
												<BooleanToVisibilityConverter/>
											</TemplateBinding.Converter>
										</TemplateBinding>
									</ToggleButton.Visibility>
								</ToggleButton>
							</Grid>
							
							<Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False" ToolTip="" AllowsTransparency="True" VerticalOffset="1.0">
								<Popup.Resources>
									<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
										<Style.Triggers>
											<Trigger Property="Content" Value="">
												<Setter Property="Visibility" Value="Collapsed"/>
											</Trigger>
										</Style.Triggers>
									</Style>
								</Popup.Resources>
								<Border Margin="2,0,2,4" Background="{DynamicResource brushControl_Background_Light}" Effect="{DynamicResource effectShadow_Small}" CornerRadius="0,0,2,2">
									<StackPanel>
										<Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" DisplayDate="2018-06-21">
											<Calendar.Template>
												<ControlTemplate TargetType="{x:Type Calendar}">
													<Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:DateTimePicker}}}">
														<StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
															<CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}"/>
														</StackPanel>
													</Viewbox>
												</ControlTemplate>
											</Calendar.Template>
										</Calendar>
										<tk:TimePicker x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding TimePickerAllowSpin}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}" Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}" Step="{TemplateBinding Step}" Text="" Visibility="{TemplateBinding TimePickerVisibility}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
									</StackPanel>
								</Border>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
						
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
								<Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
						</DataTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.6" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
</ResourceDictionary>