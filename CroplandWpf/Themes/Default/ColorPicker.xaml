<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
					xmlns:a="clr-namespace:CroplandWpf.Attached"
					xmlns:c="clr-namespace:CroplandWpf.Components"
                    xmlns:tk="http://schemas.xceed.com/wpf/xaml/toolkit">

	<Style x:Key="styleRepeatButton_Spinner_ColorPicker_Increase" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="MinWidth" Value="15"></Setter>
		<Setter Property="MinHeight" Value="12"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Grid>
						<Border x:Name="borderBackground" CornerRadius="0,2,0,0" Background="{DynamicResource brushControl_Background_Light}"></Border>
						<Border x:Name="borderBackground_MouseOver" Opacity="0.0" CornerRadius="{Binding ElementName=borderBackground, Path=CornerRadius}" Background="{DynamicResource brushControl_Background_MouseOver_Light}"></Border>
						<Path x:Name="pathArrow" Margin="0,1,0,0" Data="{DynamicResource geometryNumericUpDown_Arrow_Up}" Width="12" Height="6" Stretch="Fill" Fill="{DynamicResource brushNumericUpDown_Arrow_Background}" VerticalAlignment="Center" HorizontalAlignment="Center"></Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="pathArrow" Property="Fill" Value="{DynamicResource brushControl_Background_Light}"></Setter>
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderBackground_MouseOver" Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderBackground_MouseOver" Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleRepeatButton_Spinner_ColorPicker_Decrease" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="MinWidth" Value="15"></Setter>
		<Setter Property="MinHeight" Value="12"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Grid>
						<Border x:Name="borderBackground" CornerRadius="0,0,2,0" Background="{DynamicResource brushControl_Background_Light}"></Border>
						<Border x:Name="borderBackground_MouseOver" Opacity="0.0" CornerRadius="{Binding ElementName=borderBackground, Path=CornerRadius}" Background="{DynamicResource brushControl_Background_MouseOver_Light}"></Border>
						<Path x:Name="pathArrow" Data="{DynamicResource geometryNumericUpDown_Arrow_Up}" Width="12" Height="6" Stretch="Fill" Fill="{DynamicResource brushNumericUpDown_Arrow_Background}" VerticalAlignment="Center" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5">
							<Path.RenderTransform>
								<ScaleTransform ScaleX="1.0" ScaleY="-1.0"></ScaleTransform>
							</Path.RenderTransform>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="pathArrow" Property="Fill" Value="{DynamicResource brushControl_Background_Light}"></Setter>
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderBackground_MouseOver" Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderBackground_MouseOver" Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleWatermarkTextBox_ColorPicker" TargetType="{x:Type tk:WatermarkTextBox}">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
		<Setter Property="Foreground" Value="{DynamicResource brushControl_Foreground_Dark}"></Setter>
		<Setter Property="FontSize" Value="9.5pt"></Setter>
		<Setter Property="MinHeight" Value="20"></Setter>
		<Setter Property="MinWidth" Value="40"></Setter>
		<Setter Property="Padding" Value="0"></Setter>
		<Setter Property="Background" Value="{DynamicResource brushControl_Background_Light}"></Setter>
		<Setter Property="TextAlignment" Value="Right"></Setter>
		<!--<Setter Property="WatermarkTemplate">
			<Setter.Value>
				<DataTemplate>
					<ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type tk:WatermarkTextBox}">
					<Grid>
						<ScrollViewer x:Name="PART_ContentHost" Style="{DynamicResource styleScrollViewer_TextBox}" Margin="5,2" Padding="0" VerticalAlignment="Center" HorizontalAlignment="Stretch" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"></ScrollViewer>
						<ContentPresenter x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<ContentPresenter.ContentTemplate>
								<Binding Path="WatermarkTemplate" RelativeSource="{RelativeSource TemplatedParent}">
									<Binding.TargetNullValue>
										<DataTemplate>
											<ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False"/>
										</DataTemplate>
									</Binding.TargetNullValue>
								</Binding>
							</ContentPresenter.ContentTemplate>
						</ContentPresenter>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="KeepWatermarkOnGotFocus" Value="False"/>
								<Condition Property="IsFocused" Value="False"/>
								<Condition Property="Text" Value=""/>
							</MultiTrigger.Conditions>
							<!--<Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>-->
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="KeepWatermarkOnGotFocus" Value="True"/>
								<Condition Property="Text" Value=""/>
							</MultiTrigger.Conditions>
							<!--<Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>-->
						</MultiTrigger>
						<Trigger Property="IsReadOnly" Value="True">
							<Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.7"></Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="styleButtonSpinner_ColorPicker" TargetType="{x:Type tk:ButtonSpinner}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
		<Setter Property="Foreground" Value="{DynamicResource brushControl_Foreground_Dark}"></Setter>
		<Setter Property="FontSize" Value="9.5pt"></Setter>
		<Setter Property="MinHeight" Value="28"></Setter>
		<Setter Property="MinWidth" Value="40"></Setter>
		<Setter Property="Padding" Value="0"></Setter>
		<Setter Property="Background" Value="{DynamicResource brushControl_Background_Light}"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Center"></Setter>
		<Setter Property="IsTabStop" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type tk:ButtonSpinner}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto" MinWidth="20"/>
						</Grid.ColumnDefinitions>
						<Border Grid.ColumnSpan="2" x:Name="borderEffectHost" Background="{DynamicResource brushControl_Background_Light}" Effect="{DynamicResource effectShadow_Small}"></Border>
						<Border Grid.ColumnSpan="2" x:Name="borderEffectHost_Focused" Opacity="0.0" Background="{TemplateBinding Background}" Effect="{DynamicResource effectShadow_Large}"></Border>
						<ContentPresenter Grid.Column="0" x:Name="contentPresenter" Content="{TemplateBinding Content}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

						<Grid Grid.Column="1" MinWidth="20">
							<Grid.RowDefinitions>
								<RowDefinition Height="*"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<RepeatButton Grid.Row="0" x:Name="PART_IncreaseButton" IsTabStop="{TemplateBinding IsTabStop}" Style="{StaticResource styleRepeatButton_Spinner_ColorPicker_Increase}"></RepeatButton>
							<RepeatButton Grid.Row="1" x:Name="PART_DecreaseButton" IsTabStop="{TemplateBinding IsTabStop}" Style="{StaticResource styleRepeatButton_Spinner_ColorPicker_Decrease}"></RepeatButton>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderEffectHost" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" From="1.2" To="4.0" Duration="00:00:00.100"></DoubleAnimation>
										<DoubleAnimation Storyboard.TargetName="borderEffectHost" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" From="4.0" To="10.0" Duration="00:00:00.100"></DoubleAnimation>
										<DoubleAnimation Storyboard.TargetName="borderEffectHost" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" From="0.3" To="0.2" Duration="00:00:00.100"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderEffectHost" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" From="4.0" To="1.2" Duration="00:00:00.100"></DoubleAnimation>
										<DoubleAnimation Storyboard.TargetName="borderEffectHost" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" From="10.0" To="4.0" Duration="00:00:00.100"></DoubleAnimation>
										<DoubleAnimation Storyboard.TargetName="borderEffectHost" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" From="0.2" To="0.3" Duration="00:00:00.100"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.6" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" SourceName="PART_IncreaseButton" Value="False">
							<Setter Property="ContentTemplate" TargetName="PART_IncreaseButton">
								<Setter.Value>
									<DataTemplate>
										<Path Data="M0,5L4.5,0.5 9,5 6,5 4.5,3.5 3,5z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphDisabledForegroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="9"/>
									</DataTemplate>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" SourceName="PART_DecreaseButton" Value="False">
							<Setter Property="ContentTemplate" TargetName="PART_DecreaseButton">
								<Setter.Value>
									<DataTemplate>
										<Path Data="M0,0L3,0 4.5,1.5 6,0 9,0 4.5,4.5z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphDisabledForegroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="5" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="9"/>
									</DataTemplate>
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="styleByteUpDown_ColorPicker" TargetType="tk:ByteUpDown">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Right"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="TextAlignment" Value="Right"/>
		<Setter Property="MinWidth" Value="40"></Setter>
		<Setter Property="MinHeight" Value="20"></Setter>
		<Setter Property="AllowSpin" Value="True"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="tk:ByteUpDown">
					<Grid>
						<tk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Stretch" Style="{StaticResource styleButtonSpinner_ColorPicker}">
							<tk:WatermarkTextBox x:Name="PART_TextBox" Style="{StaticResource styleWatermarkTextBox_ColorPicker}" AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}" AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" AcceptsReturn="False" BorderThickness="0" Background="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"/>
						</tk:ButtonSpinner>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False"/>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=AllowTextInput}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="True">
							<Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleRepeatButton_Slider_ColorPicker_Decrease" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="VerticalAlignment" Value="Center"></Setter>
		<Setter Property="Height" Value="4"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border BorderBrush="#FF0f673c" BorderThickness="1" CornerRadius="2,0,0,2" Background="#1e7048"></Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleRepeatButton_Slider_ColorPicker_Increase" TargetType="RepeatButton">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="VerticalAlignment" Value="Center"></Setter>
		<Setter Property="Height" Value="4"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Border Background="#FFe2e7ee" CornerRadius="0,2,2,0"></Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleThumb_Slider_ColorPicker" TargetType="Thumb">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Grid Height="12" Width="12" Background="Transparent">
						<Border Background="#FFfcfcfc" BorderBrush="#FF5a9578" BorderThickness="1" CornerRadius="3"></Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleSlider_ColorPicker" TargetType="Slider">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="MinHeight" Value="12"></Setter>
		<Setter Property="MinWidth" Value="30"></Setter>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Slider">
					<Grid Background="Transparent">
						<Track x:Name="PART_Track" VerticalAlignment="Center">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource styleRepeatButton_Slider_ColorPicker_Decrease}"/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource styleRepeatButton_Slider_ColorPicker_Increase}"/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb x:Name="Thumb" Focusable="False" Style="{StaticResource styleThumb_Slider_ColorPicker}" VerticalAlignment="Center"/>
							</Track.Thumb>
						</Track>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type tk:ColorCanvas}" TargetType="{x:Type tk:ColorCanvas}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate  TargetType="{x:Type tk:ColorCanvas}">
					<Border Padding="3">
						<Grid Margin="2">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="200"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<Border ClipToBounds="True" Padding="1">
									<Border.Background>
										<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
											<DrawingBrush.Drawing>
												<DrawingGroup>
													<GeometryDrawing Brush="White">
														<GeometryDrawing.Geometry>
															<RectangleGeometry Rect="0,0,100,100"/>
														</GeometryDrawing.Geometry>
													</GeometryDrawing>
													<GeometryDrawing Brush="LightGray">
														<GeometryDrawing.Geometry>
															<GeometryGroup>
																<RectangleGeometry Rect="0,0,50,50"/>
																<RectangleGeometry Rect="50,50,50,50"/>
															</GeometryGroup>
														</GeometryDrawing.Geometry>
													</GeometryDrawing>
												</DrawingGroup>
											</DrawingBrush.Drawing>
										</DrawingBrush>
									</Border.Background>
									<Canvas x:Name="PART_ColorShadingCanvas" HorizontalAlignment="Left" Height="100" VerticalAlignment="Top" Width="200">
										<Rectangle x:Name="ColorShadingRectangle" Height="{Binding Height, ElementName=PART_ColorShadingCanvas}" Width="{Binding Width, ElementName=PART_ColorShadingCanvas}">
											<Rectangle.Fill>
												<Binding ElementName="PART_SpectrumSlider" Path="SelectedColor">
													<Binding.Converter>
														<tk:ColorToSolidColorBrushConverter/>
													</Binding.Converter>
												</Binding>
											</Rectangle.Fill>
										</Rectangle>
										<Rectangle x:Name="WhiteGradient" Height="{Binding Height, ElementName=PART_ColorShadingCanvas}" Width="{Binding Width, ElementName=PART_ColorShadingCanvas}">
											<Rectangle.Fill>
												<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
													<GradientStop Color="White" Offset="0"/>
													<GradientStop Color="Transparent" Offset="1"/>
												</LinearGradientBrush>
											</Rectangle.Fill>
										</Rectangle>
										<Rectangle x:Name="BlackGradient" Height="{Binding Height, ElementName=PART_ColorShadingCanvas}" Width="{Binding Width, ElementName=PART_ColorShadingCanvas}">
											<Rectangle.Fill>
												<LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
													<GradientStop Color="Black" Offset="0"/>
													<GradientStop Color="#00000000" Offset="1"/>
												</LinearGradientBrush>
											</Rectangle.Fill>
										</Rectangle>
										<Canvas x:Name="PART_ColorShadeSelector" Height="10" IsHitTestVisible="False" Width="10">
											<Ellipse Height="10" IsHitTestVisible="False" Stroke="White" StrokeThickness="3" Width="10"/>
											<Ellipse Height="10" IsHitTestVisible="False" Stroke="Black" StrokeThickness="1" Width="10"/>
										</Canvas>
									</Canvas>
								</Border>
								<Border Margin="0,5,0,0" Grid.Row="1">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="*"/>
										</Grid.ColumnDefinitions>
										<Border x:Name="SelectedColorBorder" Height="22" Margin="2,0">
											<Border.Background>
												<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
													<DrawingBrush.Drawing>
														<DrawingGroup>
															<GeometryDrawing Brush="White">
																<GeometryDrawing.Geometry>
																	<RectangleGeometry Rect="0,0,100,100"/>
																</GeometryDrawing.Geometry>
															</GeometryDrawing>
															<GeometryDrawing Brush="LightGray">
																<GeometryDrawing.Geometry>
																	<GeometryGroup>
																		<RectangleGeometry Rect="0,0,50,50"/>
																		<RectangleGeometry Rect="50,50,50,50"/>
																	</GeometryGroup>
																</GeometryDrawing.Geometry>
															</GeometryDrawing>
														</DrawingGroup>
													</DrawingBrush.Drawing>
												</DrawingBrush>
											</Border.Background>
											<Rectangle x:Name="SelectedColor">
												<Rectangle.Fill>
													<Binding Path="SelectedColor" RelativeSource="{RelativeSource TemplatedParent}">
														<Binding.Converter>
															<tk:ColorToSolidColorBrushConverter/>
														</Binding.Converter>
													</Binding>
												</Rectangle.Fill>
											</Rectangle>
										</Border>
										<TextBox x:Name="PART_HexadecimalTextBox" Grid.Column="1" Margin="2,0" VerticalAlignment="Center">
											<!--<TextBox.Style>
												<Style TargetType="{x:Type TextBox}">
													<Setter Property="Background" Value="Transparent"/>
													<Style.BasedOn>
														<Style TargetType="{x:Type TextBox}">
															<Style.BasedOn>
																<Style TargetType="{x:Type TextBoxBase}">
																	<Style.Triggers>
																		<DataTrigger Binding="{Binding (0)}" Value="false">
																			<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
																		</DataTrigger>
																		<MultiTrigger>
																			<MultiTrigger.Conditions>
																				<Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
																				<Condition Property="IsSelectionActive" Value="False"/>
																			</MultiTrigger.Conditions>
																			<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
																		</MultiTrigger>
																	</Style.Triggers>
																</Style>
															</Style.BasedOn>
														</Style>
													</Style.BasedOn>
													<Style.Triggers>
														<Trigger Property="IsFocused" Value="False">
															<Setter Property="BorderBrush" Value="Transparent"/>
														</Trigger>
													</Style.Triggers>
												</Style>
											</TextBox.Style>-->
										</TextBox>
									</Grid>
								</Border>
								<Border ClipToBounds="False" Grid.Column="1" Margin="4,-8,0,0" Grid.RowSpan="2">
									<tk:ColorSpectrumSlider x:Name="PART_SpectrumSlider" VerticalAlignment="Stretch"/>
								</Border>
							</Grid>
							<Border x:Name="RGBBorder" BorderThickness="1" ClipToBounds="True" Margin="0,10,0,0" MinWidth="180" Grid.Row="1">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto"/>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="60"/>
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto"/>
										<RowDefinition Height="Auto"/>
										<RowDefinition Height="Auto"/>
										<RowDefinition Height="Auto"/>
									</Grid.RowDefinitions>

									<TextBlock Grid.Row="0" Grid.Column="0" Text="R" VerticalAlignment="Center"></TextBlock>
									<Slider Grid.Row="0" Grid.Column="1" x:Name="PART_RSlider" Style="{StaticResource styleSlider_ColorPicker}" LargeChange="10" Maximum="255" Margin="4,6" SmallChange="1" TickFrequency="1" Value="{Binding R, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
									<tk:ByteUpDown Grid.Row="0" Grid.Column="2" Style="{StaticResource styleByteUpDown_ColorPicker}" Text="" Value="{Binding Value, ElementName=PART_RSlider}" VerticalAlignment="Center" Margin="0,2"/>

									<TextBlock Grid.Row="1" Grid.Column="0" Text="G" VerticalAlignment="Center"></TextBlock>
									<Slider Grid.Row="1" Grid.Column="1" x:Name="PART_GSlider" Style="{StaticResource styleSlider_ColorPicker}" LargeChange="10" Maximum="255" Margin="4,6" SmallChange="1" TickFrequency="1" Value="{Binding G, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
									<tk:ByteUpDown Grid.Row="1" Grid.Column="2" Style="{StaticResource styleByteUpDown_ColorPicker}" Text="" Value="{Binding Value, ElementName=PART_GSlider}" VerticalAlignment="Center" Margin="0,2"/>

									<TextBlock Grid.Row="2" Grid.Column="0" Text="B" VerticalAlignment="Center"></TextBlock>
									<Slider Grid.Row="2" Grid.Column="1" x:Name="PART_BSlider" Style="{StaticResource styleSlider_ColorPicker}" LargeChange="10" Maximum="255" Margin="4,6" SmallChange="1" TickFrequency="1" Value="{Binding B, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
									<tk:ByteUpDown Grid.Row="2" Grid.Column="3" Style="{StaticResource styleByteUpDown_ColorPicker}" Text="" Value="{Binding Value, ElementName=PART_BSlider}" VerticalAlignment="Center" Margin="0,2"/>

									<TextBlock Grid.Column="0" Grid.Row="3" Text="A" VerticalAlignment="Center">
										<TextBlock.Visibility>
											<Binding Path="UsingAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}">
												<Binding.Converter>
													<BooleanToVisibilityConverter/>
												</Binding.Converter>
											</Binding>
										</TextBlock.Visibility></TextBlock>
									<Slider x:Name="PART_OpacitySlider" Grid.Column="1" Style="{StaticResource styleSlider_ColorPicker}" LargeChange="10" Maximum="255" Margin="4,6" Grid.Row="3" SmallChange="1" Value="{Binding A, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
										<Slider.Visibility>
											<Binding Path="UsingAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}">
												<Binding.Converter>
													<BooleanToVisibilityConverter/>
												</Binding.Converter>
											</Binding>
										</Slider.Visibility>
									</Slider>
									<tk:ByteUpDown Grid.Column="3" Grid.Row="3" Text="" Style="{StaticResource styleByteUpDown_ColorPicker}" Value="{Binding Value, ElementName=PART_OpacitySlider}" VerticalAlignment="Center" Margin="0,2">
										<tk:ByteUpDown.Visibility>
											<Binding Path="UsingAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}">
												<Binding.Converter>
													<BooleanToVisibilityConverter/>
												</Binding.Converter>
											</Binding>
										</tk:ByteUpDown.Visibility>
									</tk:ByteUpDown>
								</Grid>
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
						<Trigger Property="SelectedColor" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="PART_ColorShadeSelector" Value="Collapsed"/>
							<Setter Property="Background" TargetName="SelectedColorBorder" Value="Transparent"/>
							<Setter Property="IsEnabled" TargetName="RGBBorder" Value="False"/>
							<Setter Property="TextElement.Foreground" TargetName="RGBBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ColorPickerTabItemStyle1" TargetType="{x:Type tk:ColorPickerTabItem}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<!--<Setter Property="BorderThickness" Value="1,1,1,0"/>
		<Setter Property="BorderBrush" Value="{DynamicResource brushControl_Background_Dark}"/>-->
		<Setter Property="Background" Value="{DynamicResource brushControl_Background_Light}"/>
		<Setter Property="Height" Value="35"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type tk:ColorPickerTabItem}">
					<Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2,2,0,0">
						<Grid>
							<TextBlock x:Name="textBlock_Header" Opacity="0.7" Foreground="#FF000000" Text="{TemplateBinding Header}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="15,0"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="textBlock_Header" Property="Opacity" Value="1.0"/>
							<Setter Property="Height" Value="36"/>
							<Setter Property="Margin" Value="0,0,0,-1"/>
							<Setter Property="Background" Value="{DynamicResource brushControl_Background_Dark}"/>
							<Setter TargetName="textBlock_Header" Property="Foreground" Value="{DynamicResource brushControl_Foreground_Light}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleTabControlEx_ColorPicker" TargetType="c:TabControlEx">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource brushControl_Background_Dark}"></Setter>
		<Setter Property="BorderThickness" Value="0,1,0,0"></Setter>
		<Setter Property="Background" Value="{DynamicResource brushControl_Background_Light}"></Setter>
		<Setter Property="ItemContainerStyle" Value="{StaticResource ColorPickerTabItemStyle1}"></Setter>
		<Setter Property="Padding" Value="4"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="c:TabControlEx">
					<Grid Background="Transparent">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"></RowDefinition>
							<RowDefinition></RowDefinition>
						</Grid.RowDefinitions>

						<StackPanel Panel.ZIndex="1" Orientation="Horizontal" Grid.Row="0" IsItemsHost="True"></StackPanel>

						<Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0,0,2,2">
							<Grid x:Name="PART_ItemsHolder" Margin="{TemplateBinding Padding}"></Grid>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleListBox_RecentColors" TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="MaxHeight" Value="40"/>
		<Setter Property="SelectionMode" Value="Single"/>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel IsItemsHost="True">
						<WrapPanel.Width>
							<Binding ConverterParameter="-18" Path="MaxDropDownWidth" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
								<Binding.Converter>
									<tk:AdditionConverter/>
								</Binding.Converter>
							</Binding>
						</WrapPanel.Width>
					</WrapPanel>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="ToolTip" Value="{Binding Name}"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListBoxItem}">
								<Grid x:Name="mainGrid" ToolTip="{Binding Name}">
									<Grid.Resources>
										<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
											<Style.Triggers>
												<Trigger Property="Content" Value="">
													<Setter Property="Visibility" Value="Collapsed"/>
												</Trigger>
											</Style.Triggers>
										</Style>
									</Grid.Resources>
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
									<Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
										<Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<Trigger Property="IsSelected" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}}" Value="False">
										<Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
									</DataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
							<Border.Background>
								<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="White">
												<GeometryDrawing.Geometry>
													<RectangleGeometry Rect="0,0,100,100"/>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
											<GeometryDrawing Brush="LightGray">
												<GeometryDrawing.Geometry>
													<GeometryGroup>
														<RectangleGeometry Rect="0,0,50,50"/>
														<RectangleGeometry Rect="50,50,50,50"/>
													</GeometryGroup>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Border.Background>
							<Rectangle Height="14" Width="14">
								<Rectangle.Style>
									<Style TargetType="{x:Type Rectangle}">
										<Setter Property="Fill">
											<Setter.Value>
												<Binding Path="Color">
													<Binding.Converter>
														<tk:ColorToSolidColorBrushConverter/>
													</Binding.Converter>
												</Binding>
											</Setter.Value>
										</Setter>
									</Style>
								</Rectangle.Style>
							</Rectangle>
						</Border>
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel IsItemsHost="True" Width="240">
						<!--<WrapPanel.Width>
							<Binding ConverterParameter="-40" Path="MaxDropDownWidth" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
								<Binding.Converter>
									<tk:AdditionConverter/>
								</Binding.Converter>
							</Binding>
						</WrapPanel.Width>-->
					</WrapPanel>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBox">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1">
						<ScrollViewer HorizontalScrollBarVisibility="Disabled">
							<ItemsPresenter></ItemsPresenter>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.6" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="styleListBox_AvailableColors" TargetType="ListBox">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="Background" Value="{DynamicResource brushListBox_Background}"></Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource brushListBox_Border}"></Setter>
		<Setter Property="BorderThickness" Value="0"></Setter>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
		<Setter Property="SelectionMode" Value="Single"/>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="ToolTip" Value="{Binding Name}"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListBoxItem}">
								<Grid x:Name="mainGrid" ToolTip="{Binding Name}">
									<Grid.Resources>
										<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
											<Style.Triggers>
												<Trigger Property="Content" Value="">
													<Setter Property="Visibility" Value="Collapsed"/>
												</Trigger>
											</Style.Triggers>
										</Style>
									</Grid.Resources>
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
									<Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
										<Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<Trigger Property="IsSelected" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}}" Value="False">
										<Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
									</DataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
							<Border.Background>
								<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="White">
												<GeometryDrawing.Geometry>
													<RectangleGeometry Rect="0,0,100,100"/>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
											<GeometryDrawing Brush="LightGray">
												<GeometryDrawing.Geometry>
													<GeometryGroup>
														<RectangleGeometry Rect="0,0,50,50"/>
														<RectangleGeometry Rect="50,50,50,50"/>
													</GeometryGroup>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Border.Background>
							<Rectangle Height="14" Width="14">
								<Rectangle.Style>
									<Style TargetType="{x:Type Rectangle}">
										<Setter Property="Fill">
											<Setter.Value>
												<Binding Path="Color">
													<Binding.Converter>
														<tk:ColorToSolidColorBrushConverter/>
													</Binding.Converter>
												</Binding>
											</Setter.Value>
										</Setter>
									</Style>
								</Rectangle.Style>
							</Rectangle>
						</Border>
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel IsItemsHost="True" Width="240">
						<!--<WrapPanel.Width>
							<Binding ConverterParameter="-40" Path="MaxDropDownWidth" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
								<Binding.Converter>
									<tk:AdditionConverter/>
								</Binding.Converter>
							</Binding>
						</WrapPanel.Width>-->
					</WrapPanel>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBox">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1">
						<ScrollViewer HorizontalScrollBarVisibility="Disabled">
							<ItemsPresenter></ItemsPresenter>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.6" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="testListBox_ColorPicker" TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<!--<Setter Property="MaxHeight" Value="50"/>-->
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel IsItemsHost="True" Width="240">
						<!--<WrapPanel.Width>
							<Binding ConverterParameter="-40" Path="MaxDropDownWidth" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
								<Binding.Converter>
									<tk:AdditionConverter/>
								</Binding.Converter>
							</Binding>
						</WrapPanel.Width>-->
					</WrapPanel>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="ToolTip" Value="{Binding Name}"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListBoxItem}">
								<Grid x:Name="mainGrid" ToolTip="{Binding Name}">
									<Grid.Resources>
										<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
											<Style.Triggers>
												<Trigger Property="Content" Value="">
													<Setter Property="Visibility" Value="Collapsed"/>
												</Trigger>
											</Style.Triggers>
										</Style>
									</Grid.Resources>
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
									<Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
										<Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<Trigger Property="IsSelected" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}}" Value="False">
										<Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
									</DataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
							<Border.Background>
								<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="White">
												<GeometryDrawing.Geometry>
													<RectangleGeometry Rect="0,0,100,100"/>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
											<GeometryDrawing Brush="LightGray">
												<GeometryDrawing.Geometry>
													<GeometryGroup>
														<RectangleGeometry Rect="0,0,50,50"/>
														<RectangleGeometry Rect="50,50,50,50"/>
													</GeometryGroup>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Border.Background>
							<Rectangle Height="14" Width="14">
								<Rectangle.Style>
									<Style TargetType="{x:Type Rectangle}">
										<Setter Property="Fill">
											<Setter.Value>
												<Binding Path="Color">
													<Binding.Converter>
														<tk:ColorToSolidColorBrushConverter/>
													</Binding.Converter>
												</Binding>
											</Setter.Value>
										</Setter>
									</Style>
								</Rectangle.Style>
							</Rectangle>
						</Border>
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="SelectionMode" Value="Single"/>
	</Style>

	<DataTemplate x:Key="templateColorOnly">
		<Border VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
			<Border.Background>
				<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
					<DrawingBrush.Drawing>
						<DrawingGroup>
							<GeometryDrawing Brush="White">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,100,100"/>
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<GeometryDrawing Brush="LightGray">
								<GeometryDrawing.Geometry>
									<GeometryGroup>
										<RectangleGeometry Rect="0,0,50,50"/>
										<RectangleGeometry Rect="50,50,50,50"/>
									</GeometryGroup>
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
						</DrawingGroup>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Border.Background>
			<Rectangle>
				<Rectangle.Fill>
					<Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
						<Binding.Converter>
							<tk:ColorToSolidColorBrushConverter/>
						</Binding.Converter>
					</Binding>
				</Rectangle.Fill>
			</Rectangle>
		</Border>
	</DataTemplate>

	<Style x:Key="styleContentControl_ColorOnly" TargetType="{x:Type ContentControl}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ContentTemplate" Value="{StaticResource templateColorOnly}"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
		<Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}}" Value="{x:Null}">
				<Setter Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="styleContentControl_ColorAndName" TargetType="{x:Type ContentControl}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border>
						<Border.Background>
							<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
								<DrawingBrush.Drawing>
									<DrawingGroup>
										<GeometryDrawing Brush="White">
											<GeometryDrawing.Geometry>
												<RectangleGeometry Rect="0,0,100,100"/>
											</GeometryDrawing.Geometry>
										</GeometryDrawing>
										<GeometryDrawing Brush="LightGray">
											<GeometryDrawing.Geometry>
												<GeometryGroup>
													<RectangleGeometry Rect="0,0,50,50"/>
													<RectangleGeometry Rect="50,50,50,50"/>
												</GeometryGroup>
											</GeometryDrawing.Geometry>
										</GeometryDrawing>
									</DrawingGroup>
								</DrawingBrush.Drawing>
							</DrawingBrush>
						</Border.Background>
						<Rectangle>
							<Rectangle.Fill>
								<Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
									<Binding.Converter>
										<tk:ColorToSolidColorBrushConverter/>
									</Binding.Converter>
								</Binding>
							</Rectangle.Fill>
						</Rectangle>
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}, Path=SelectedColor}" Value="{x:Null}">
				<Setter Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="styleToggleButton_ColorPicker" TargetType="ToggleButton">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="Background" Value="{DynamicResource brushControl_Background_Light}"></Setter>
		<Setter Property="Foreground" Value="{DynamicResource brushControl_Foreground_Dark}"></Setter>
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="KeyboardNavigation.IsTabStop" Value="False"></Setter>
		<Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
		<Setter Property="Padding" Value="5"></Setter>
		<Setter Property="MinHeight" Value="36"></Setter>
		<Setter Property="MinWidth" Value="50"></Setter>
		<Setter Property="Width" Value="80"></Setter>
		<Setter Property="Height" Value="36"></Setter>
		<Setter Property="Visibility">
			<Setter.Value>
				<Binding RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}" Path="ShowDropDownButton">
					<Binding.Converter>
						<BooleanToVisibilityConverter/>
					</Binding.Converter>
				</Binding>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition></ColumnDefinition>
							<ColumnDefinition Width="Auto"></ColumnDefinition>
						</Grid.ColumnDefinitions>
						<Border Grid.ColumnSpan="2" x:Name="borderBackground_Overlap_MouseOver" Opacity="0.0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="1" CornerRadius="{Binding ElementName=borderBackground, Path=CornerRadius}" Effect="{DynamicResource effectShadow_Large}"></Border>
						<Border Grid.ColumnSpan="2" x:Name="borderBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Effect="{DynamicResource effectShadow_Small}"></Border>
						<!--<ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"></ContentPresenter>-->
						<Border Grid.Column="0" Margin="{TemplateBinding Padding}">
							<Border.Background>
								<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="White">
												<GeometryDrawing.Geometry>
													<RectangleGeometry Rect="0,0,100,100"/>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
											<GeometryDrawing Brush="LightGray">
												<GeometryDrawing.Geometry>
													<GeometryGroup>
														<RectangleGeometry Rect="0,0,50,50"/>
														<RectangleGeometry Rect="50,50,50,50"/>
													</GeometryGroup>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Border.Background>
							<Rectangle>
								<Rectangle.Fill>
									<Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
										<Binding.Converter>
											<tk:ColorToSolidColorBrushConverter/>
										</Binding.Converter>
									</Binding>
								</Rectangle.Fill>
							</Rectangle>
						</Border>
						<Path Grid.Column="1" x:Name="pathIndicator" Stretch="Fill" HorizontalAlignment="Right" VerticalAlignment="Center" Data="{DynamicResource geometryComboBox_SingleArrow}" Width="6" Height="3" Fill="{TemplateBinding Foreground}" Margin="10,0" RenderTransformOrigin="0.5,0.5">
							<Path.RenderTransform>
								<ScaleTransform x:Name="transformIndicator" ScaleX="1.0" ScaleY="-1.0"></ScaleTransform>
							</Path.RenderTransform>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="pathIndicator" Property="RenderTransform" Value="{x:Null}"></Setter>
							<Setter TargetName="borderBackground" Property="CornerRadius" Value="2,2,0,0"></Setter>
							<Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"></Condition>
								<Condition Property="IsChecked" Value="False"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderBackground_Overlap_MouseOver" Storyboard.TargetProperty="Opacity" Duration="00:00:00.150" From="0.0" To="1.0"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="borderBackground_Overlap_MouseOver" Storyboard.TargetProperty="Opacity" Duration="00:00:00.150" From="1.0" To="0.0"></DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="borderBackground" Property="Effect" Value="{x:Null}"></Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="styleListBox_StandardColors" TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="MaxHeight" Value="500"/>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel IsItemsHost="True">
						<WrapPanel.Width>
							<Binding ConverterParameter="-18" Path="MaxDropDownWidth" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}">
								<Binding.Converter>
									<tk:AdditionConverter/>
								</Binding.Converter>
							</Binding>
						</WrapPanel.Width>
					</WrapPanel>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="ToolTip" Value="{Binding Name}"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListBoxItem}">
								<Grid x:Name="mainGrid" ToolTip="{Binding Name}">
									<Grid.Resources>
										<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
											<Style.Triggers>
												<Trigger Property="Content" Value="">
													<Setter Property="Visibility" Value="Collapsed"/>
												</Trigger>
											</Style.Triggers>
										</Style>
									</Grid.Resources>
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
									<Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
										<Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<Trigger Property="IsSelected" Value="True">
										<Setter Property="BorderBrush" TargetName="_outerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
										<Setter Property="BorderBrush" TargetName="_innerBorder" Value="{DynamicResource {ComponentResourceKey ResourceId=ButtonMouseOverBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
									</Trigger>
									<DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tk:ColorPicker}}}" Value="False">
										<Setter Property="ToolTip" TargetName="mainGrid" Value=""/>
									</DataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Border BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" Margin="2">
							<Border.Background>
								<DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="White">
												<GeometryDrawing.Geometry>
													<RectangleGeometry Rect="0,0,100,100"/>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
											<GeometryDrawing Brush="LightGray">
												<GeometryDrawing.Geometry>
													<GeometryGroup>
														<RectangleGeometry Rect="0,0,50,50"/>
														<RectangleGeometry Rect="50,50,50,50"/>
													</GeometryGroup>
												</GeometryDrawing.Geometry>
											</GeometryDrawing>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Border.Background>
							<Rectangle Height="14" Width="14">
								<Rectangle.Style>
									<Style TargetType="{x:Type Rectangle}">
										<Setter Property="Fill">
											<Setter.Value>
												<Binding Path="Color">
													<Binding.Converter>
														<tk:ColorToSolidColorBrushConverter/>
													</Binding.Converter>
												</Binding>
											</Setter.Value>
										</Setter>
									</Style>
								</Rectangle.Style>
							</Rectangle>
						</Border>
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="SelectionMode" Value="Single"/>
	</Style>

	<Style x:Key="{x:Type tk:ColorPicker}" TargetType="{x:Type tk:ColorPicker}">
		<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
		<Setter Property="Background" Value="White"/>
		<Setter Property="ButtonStyle" Value="{StaticResource styleToggleButton_ColorPicker}"></Setter>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="MaxDropDownWidth" Value="270"/>
		<Setter Property="ShowAvailableColors" Value="True"></Setter>
		<Setter Property="ShowStandardColors" Value="False"></Setter>
		<Setter Property="ShowRecentColors" Value="True"></Setter>
		<Setter Property="DisplayColorAndName" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type tk:ColorPicker}">
					<Grid>
						<ToggleButton x:Name="PART_ColorPickerToggleButton" IsTabStop="True" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Height="36" Style="{TemplateBinding ButtonStyle}">
							<ToggleButton.IsHitTestVisible>
								<Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
									<Binding.Converter>
										<tk:InverseBoolConverter/>
									</Binding.Converter>
								</Binding>
							</ToggleButton.IsHitTestVisible>
							<!--<Grid Margin="2">
								<ContentControl x:Name="ColorOnly" Style="{StaticResource styleContentControl_ColorOnly}"></ContentControl>-->
								<!--<Border x:Name="ColorAndName" Visibility="Hidden">
									<StackPanel Orientation="Horizontal">
										<ContentControl BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" BorderThickness="1" HorizontalAlignment="Left" Margin="2,1,4,1" Width="20" Style="{StaticResource styleContentControl_ColorAndName}"></ContentControl>
										<TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
									</StackPanel>
								</Border>-->
							<!--</Grid>-->
						</ToggleButton>

						<Popup x:Name="PART_ColorPickerPalettePopup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsChecked, ElementName=PART_ColorPickerToggleButton}" PopupAnimation="None" StaysOpen="False" ToolTip="" VerticalOffset="0" VerticalAlignment="Bottom" HorizontalOffset="-3">
							<Popup.Resources>
								<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
									<Style.Triggers>
										<Trigger Property="Content" Value="">
											<Setter Property="Visibility" Value="Collapsed"/>
										</Trigger>
									</Style.Triggers>
								</Style>
							</Popup.Resources>

							<Border x:Name="borderRoot" Margin="3,0,3,4" Width="268" Height="346" Background="{DynamicResource brushControl_Background_Light}" Effect="{DynamicResource effectShadow_Small}" CornerRadius="0,0,2,2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,0,0">
								<Grid>
									<c:TabControlEx x:Name="ColorPickerTabControl" Style="{StaticResource styleTabControlEx_ColorPicker}">
										<tk:ColorPickerTabItem x:Name="StandardTabItem" 
														   Header="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}">
											<Grid x:Name="_colorPaletteHost" Margin="4">
												<Grid.RowDefinitions>
													<RowDefinition Height="*"/>
													<RowDefinition Height="Auto"/>
													<RowDefinition Height="Auto"/>
												</Grid.RowDefinitions>
												<Grid Grid.Row="0">
													<Grid.Visibility>
														<TemplateBinding Property="ShowAvailableColors">
															<TemplateBinding.Converter>
																<BooleanToVisibilityConverter/>
															</TemplateBinding.Converter>
														</TemplateBinding>
													</Grid.Visibility>
													<Grid>
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto"/>
															<RowDefinition/>
														</Grid.RowDefinitions>
														<TextBlock Margin="4" Text="{TemplateBinding AvailableColorsHeader}"/>
														<ListBox x:Name="PART_AvailableColors" Grid.Row="1" ItemsSource="{TemplateBinding AvailableColors}" Style="{StaticResource styleListBox_AvailableColors}">
														</ListBox>
													</Grid>
												</Grid>

												<Grid Grid.Row="1">
													<Grid.Visibility>
														<TemplateBinding Property="ShowStandardColors">
															<TemplateBinding.Converter>
																<BooleanToVisibilityConverter/>
															</TemplateBinding.Converter>
														</TemplateBinding>
													</Grid.Visibility>
													<Grid>
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto"/>
															<RowDefinition Height="Auto"/>
														</Grid.RowDefinitions>
														<TextBlock Margin="4" Text="{TemplateBinding StandardColorsHeader}"/>
														<ListBox x:Name="PART_StandardColors" Grid.Row="1" ItemsSource="{TemplateBinding AvailableColors}" Style="{StaticResource styleListBox_StandardColors}"></ListBox>
													</Grid>
												</Grid>

												<Grid Margin="0,1" Grid.Row="2">
													<Grid.Visibility>
														<TemplateBinding Property="ShowRecentColors">
															<TemplateBinding.Converter>
																<BooleanToVisibilityConverter/>
															</TemplateBinding.Converter>
														</TemplateBinding>
													</Grid.Visibility>
													<Grid>
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto"/>
															<RowDefinition Height="Auto"/>
														</Grid.RowDefinitions>
														<TextBlock Margin="0,1" Padding="2" Text="{TemplateBinding RecentColorsHeader}"/>
														<ListBox x:Name="PART_RecentColors" Grid.Row="1" ItemsSource="{TemplateBinding RecentColors}" Style="{StaticResource styleListBox_RecentColors}"></ListBox>
													</Grid>
												</Grid>
											</Grid>
										</tk:ColorPickerTabItem>

										<tk:ColorPickerTabItem x:Name="AdvancedTabItem" 
														   Header="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}">
											<Grid x:Name="_colorCanvasHost" Margin="4">
												<tk:ColorCanvas BorderThickness="0" Background="Transparent" SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}">
													<tk:ColorCanvas.Width>
														<Binding ConverterParameter="-18" Path="MaxDropDownWidth" RelativeSource="{RelativeSource TemplatedParent}">
															<Binding.Converter>
																<tk:AdditionConverter/>
															</Binding.Converter>
														</Binding>
													</tk:ColorCanvas.Width>
												</tk:ColorCanvas>
											</Grid>
										</tk:ColorPickerTabItem>
									</c:TabControlEx>
									<!--<TextBlock IsHitTestVisible="False">
										<Run Text="{Binding ElementName=PART_AvailableColors, Path=ActualWidth, Mode=OneWay}"></Run>
										<Run Text=" "></Run>
										<Run Text="{Binding ElementName=PART_AvailableColors, Path=ActualHeight, Mode=OneWay}"></Run>
									</TextBlock>-->
								</Grid>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="DisplayColorAndName" Value="True">
							<!--<Setter Property="Visibility" TargetName="ColorOnly" Value="Collapsed"/>-->
							<!--<Setter Property="Visibility" TargetName="ColorAndName" Value="Visible"/>-->
						</Trigger>
						<Trigger Property="ShowTabHeaders" Value="False">
							<Setter Property="Visibility" TargetName="StandardTabItem" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="AdvancedTabItem" Value="Collapsed"/>
						</Trigger>
						<!--<Trigger Property="ShowDropDownButton" Value="False">
							<Setter Property="BorderThickness" Value="1"/>
						</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">

			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin" Value="True">

			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>