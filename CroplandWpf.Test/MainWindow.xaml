<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CroplandWpf.Test"
		xmlns:ph="clr-namespace:CroplandWpf.PresentationHelpers;assembly=CroplandWpf"
		xmlns:h="clr-namespace:CroplandWpf.Helpers;assembly=CroplandWpf"
		xmlns:tk="http://schemas.xceed.com/wpf/xaml/toolkit"
		xmlns:a="clr-namespace:CroplandWpf.Attached;assembly=CroplandWpf"
		xmlns:c="clr-namespace:CroplandWpf.Components;assembly=CroplandWpf"
		xmlns:msc="clr-namespace:System;assembly=mscorlib"
		xmlns:mvvm="clr-namespace:CroplandWpf.MVVM;assembly=CroplandWpf"
		xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
		x:Class="CroplandWpf.Test.MainWindow"
        mc:Ignorable="d"
		WindowState="Normal"
        Title="Cropland Test App" Height="800" Width="1440"
		a:MenuHelper.ItemsSource="{Binding MenuItemsTestSource}"
		d:DesignWidth="1200"
		d:DesignHeight="1480"
		WindowStartupLocation="CenterScreen"
		x:Name="windowMain"
		a:VisualHelper.IconBrush="{DynamicResource brushAppIcon_FileStar}"
		Style="{DynamicResource styleWindow_Light}">
	<!--Style="{DynamicResource {x:Type Window}}"-->

	<Window.Resources>
		<DataTemplate x:Key="templateStringTest">
			<StackPanel Orientation="Horizontal">
				<TextBlock Text="Text:"/>
				<TextBlock Text="{Binding}"/>
			</StackPanel>
		</DataTemplate>

		<DataTemplate x:Key="templateToolTip_RemovableItemContentControl" DataType="local:FileItem">
			<Grid x:Name="gridRoot">
				<Border x:Name="borderBackground" Background="{DynamicResource brushControl_Background_Dark}" Padding="10" CornerRadius="3" Effect="{DynamicResource effectShadow_Large}" BorderThickness="0" Margin="0,10,0,0" MinHeight="100" MinWidth="150" MaxWidth="300">
					<Grid TextBlock.Foreground="{DynamicResource brushControl_Foreground_Light}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<TextBlock Grid.Row="0" Grid.Column="0" FontWeight="Bold" Text="{Binding Name}"/>
						<TextBlock Grid.Row="0" Grid.Column="1" Margin="5,0,0,0" Text="{Binding Size_Mb, StringFormat=(\{0\} mb)}"/>
						<TextBlock Grid.Row="1" Grid.ColumnSpan="2" FontStyle="Italic" Text="{Binding Path}" TextTrimming="CharacterEllipsis" Margin="0,5,0,0"/>
						<c:HyperlinkButton Grid.Row="2" Grid.Column="0" HorizontalAlignment="Left" Command="{x:Static a:ToolTipBeacon.DisableToolTipsGroupCommand}" CommandParameter="{Binding (a:ToolTipBeacon.AttachedBeacon), RelativeSource={RelativeSource Self}}" VerticalAlignment="Center" Foreground="{DynamicResource brushControl_Foreground_Light}" Content="Don`t show again" Margin="0,0,40,0"/>
						<Button Grid.Row="2" Grid.Column="1" Command="{Binding (a:ToolTipBeacon.AttachedBeacon).ToolTipCloseCommand, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Right" Margin="0,5,0,0" Style="{DynamicResource styleButton_Light}" Content="Got It"/>
					</Grid>
				</Border>
				<Polygon x:Name="polygonArrow" HorizontalAlignment="Center" VerticalAlignment="Top" Points="0,11 11,0 22,11" Width="22" Height="11" Fill="{DynamicResource brushControl_Background_Dark}" RenderTransformOrigin="0.5,0.5"/>
			</Grid>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding CalculatedPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type c:OverlayContentControl}}}" Value="Top">
					<Setter TargetName="polygonArrow" Property="RenderTransform">
						<Setter.Value>
							<ScaleTransform ScaleX="1.0" ScaleY="-1.0"/>
						</Setter.Value>
					</Setter>
					<Setter TargetName="polygonArrow" Property="VerticalAlignment" Value="Bottom"/>
					<Setter TargetName="borderBackground" Property="Margin" Value="0,0,0,10"/>
				</DataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>

		<DataTemplate x:Key="templateToolTip_RemovableItemContentControl_TopPlacement" DataType="local:FileItem">
			<Grid x:Name="gridRoot">
				<Border x:Name="borderBackground" Background="{DynamicResource brushControl_Background_Light}" Padding="10" CornerRadius="3" Effect="{DynamicResource effectShadow_Large}" BorderThickness="0" Margin="0,10,0,0" MinHeight="100" MinWidth="150" MaxWidth="300">
					<Grid TextBlock.Foreground="{DynamicResource brushControl_Foreground_Dark}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<TextBlock Grid.Row="0" Grid.Column="0" FontWeight="Bold" Text="{Binding Name}"/>
						<TextBlock Grid.Row="0" Grid.Column="1" Margin="5,0,0,0" Text="{Binding Size_Mb, StringFormat=(\{0\} mb)}"/>
						<TextBlock Grid.Row="1" Grid.ColumnSpan="2" FontStyle="Italic" Text="{Binding Path}" TextTrimming="CharacterEllipsis" Margin="0,5,0,0"/>
						<c:HyperlinkButton Grid.Row="2" Grid.Column="0" HorizontalAlignment="Left" Command="{x:Static a:ToolTipBeacon.DisableToolTipsGroupCommand}" CommandParameter="{Binding (a:ToolTipBeacon.AttachedBeacon), RelativeSource={RelativeSource Self}}" Content="Don`t show again"/>
						<Button Grid.Row="2" Grid.ColumnSpan="2" Command="{Binding (a:ToolTipBeacon.AttachedBeacon).ToolTipCloseCommand, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Right" Margin="0,5,0,0" Content="Got It"/>
					</Grid>
				</Border>
				<Polygon x:Name="polygonArrow" HorizontalAlignment="Center" VerticalAlignment="Top" Points="0,11 11,0 22,11" Width="22" Height="11" Fill="{DynamicResource brushControl_Background_Light}" RenderTransformOrigin="0.5,0.5"/>
			</Grid>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding CalculatedPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type c:OverlayContentControl}}}" Value="Top">
					<Setter TargetName="polygonArrow" Property="RenderTransform">
						<Setter.Value>
							<ScaleTransform ScaleX="1.0" ScaleY="-1.0"/>
						</Setter.Value>
					</Setter>
					<Setter TargetName="polygonArrow" Property="VerticalAlignment" Value="Bottom"/>
					<Setter TargetName="borderBackground" Property="Margin" Value="0,0,0,10"/>
				</DataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>

		<DataTemplate x:Key="templateToolTip_SearchAutoComplete_LeftPlacement" DataType="local:FileItem">
			<Grid x:Name="gridRoot">
				<Border x:Name="borderBackground" Background="{DynamicResource brushControl_Background_Light}" Padding="10" CornerRadius="3" Effect="{DynamicResource effectShadow_Large}" BorderThickness="0" Margin="0,0,10,0" MinHeight="100" MinWidth="150" MaxWidth="300">
					<Grid TextBlock.Foreground="{DynamicResource brushControl_Foreground_Dark}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<TextBlock Grid.Row="0" Grid.Column="0" FontWeight="Bold" Text="Allows to search within some collection"/>
						<c:HyperlinkButton Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Command="{x:Static a:ToolTipBeacon.DisableToolTipsGroupCommand}" CommandParameter="{Binding (a:ToolTipBeacon.AttachedBeacon), RelativeSource={RelativeSource Self}}" Content="Don`t show again"/>
						<Button Grid.Row="1" Grid.ColumnSpan="2" Command="{Binding (a:ToolTipBeacon.AttachedBeacon).ToolTipCloseCommand, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Right" Margin="0,5,0,0" Content="Got It"/>
					</Grid>
				</Border>
				<Polygon x:Name="polygonArrow" HorizontalAlignment="Right" VerticalAlignment="Center" Points="0,0 11,11 0,22" Width="11" Height="22" Fill="{DynamicResource brushControl_Background_Light}" RenderTransformOrigin="0.5,0.5"/>
			</Grid>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding CalculatedPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type c:OverlayContentControl}}}" Value="Right">
					<Setter TargetName="polygonArrow" Property="RenderTransform">
						<Setter.Value>
							<ScaleTransform ScaleX="-1.0" ScaleY="1.0"/>
						</Setter.Value>
					</Setter>
					<Setter TargetName="polygonArrow" Property="HorizontalAlignment" Value="Left"/>
					<Setter TargetName="borderBackground" Property="Margin" Value="10,0,0,0"/>
				</DataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>

		<DataTemplate x:Key="templateToolTip_RemovableItemContentControl_RightPlacement" DataType="local:FileItem">
			<Grid x:Name="gridRoot">
				<Border x:Name="borderBackground" Background="{DynamicResource brushControl_Background_Light}" Padding="10" CornerRadius="3" Effect="{DynamicResource effectShadow_Large}" BorderThickness="0" Margin="0,10,0,0" MinHeight="100" MinWidth="150" MaxWidth="300">
					<Grid TextBlock.Foreground="{DynamicResource brushControl_Foreground_Dark}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<TextBlock Grid.Row="0" Grid.Column="0" FontWeight="Bold" Text="{Binding Name}"/>
						<TextBlock Grid.Row="0" Grid.Column="1" Margin="5,0,0,0" Text="{Binding Size_Mb, StringFormat=(\{0\} mb)}"/>
						<TextBlock Grid.Row="1" Grid.ColumnSpan="2" FontStyle="Italic" Text="{Binding Path}" TextTrimming="CharacterEllipsis" Margin="0,5,0,0"/>
						<c:HyperlinkButton Grid.Row="2" Grid.Column="0" HorizontalAlignment="Left" Command="{x:Static a:ToolTipBeacon.DisableToolTipsGroupCommand}" CommandParameter="{Binding (a:ToolTipBeacon.AttachedBeacon), RelativeSource={RelativeSource Self}}" Content="Don`t show again"/>
						<Button Grid.Row="2" Grid.ColumnSpan="2" Command="{Binding (a:ToolTipBeacon.AttachedBeacon).ToolTipCloseCommand, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Right" Margin="0,5,0,0" Content="Got It"/>
					</Grid>
				</Border>
				<Polygon x:Name="polygonArrow" HorizontalAlignment="Center" VerticalAlignment="Top" Points="0,11 11,0 22,11" Width="22" Height="11" Fill="{DynamicResource brushControl_Background_Light}" RenderTransformOrigin="0.5,0.5"/>
			</Grid>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding CalculatedPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type c:OverlayContentControl}}}" Value="Top">
					<Setter TargetName="polygonArrow" Property="RenderTransform">
						<Setter.Value>
							<ScaleTransform ScaleX="1.0" ScaleY="-1.0"/>
						</Setter.Value>
					</Setter>
					<Setter TargetName="polygonArrow" Property="VerticalAlignment" Value="Bottom"/>
					<Setter TargetName="borderBackground" Property="Margin" Value="0,0,0,10"/>
				</DataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>

		<c:MessageBoxInfo x:Key="mbiFromResources" ContentTemplateKey="templateMbiFromResources_Content" Header="MessageBoxInfo defined in resources" IconBrushKey="{x:Static c:MessageBoxIconBrushDefaultKeys.Warning}" Content="MessageBoxInfo with a custom ContentTemplate defined in XAML locally. Has the footer template defined too" Footer="some random footer" FooterTemplateKey="templateMbiFromResources_Footer" Buttons="Ok" ph:DataContextBridge.SourceScopeName="vm_main" Action="{Binding MessageBoxAction}">
			<!--Buttons="YesNoCancel"-->
			<c:MessageBoxInfo.Resources>
				<DataTemplate x:Key="templateMbiFromResources_Content">
					<TextBlock>
						<TextBlock Text="This MessageBox text will go in Italic style:"/>
						<LineBreak/>
						<TextBlock FontStyle="Italic" Text="{Binding}" TextWrapping="Wrap"/>
						</TextBlock>
				</DataTemplate>

				<DataTemplate x:Key="templateMbiFromResources_Footer">
					<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
						<TextBlock Text="{Binding}"/>
						<c:HyperlinkButton Padding="0" Margin="5,0,0,0" Content="Dont Show Again"/>
					</StackPanel>
				</DataTemplate>
			</c:MessageBoxInfo.Resources>
		</c:MessageBoxInfo>

		<c:MessageBoxInfo x:Key="mbiRandomButtons" ContentTemplateKey="templateMbiRandomButtons_Content" Header="Some Random Buttons MessageBox" IconBrushKey="{x:Static c:MessageBoxIconBrushDefaultKeys.Warning}" Content="Choose the button you like" Footer="some random footer" FooterTemplateKey="templateMbiRandomButtons_Footer" Buttons="Oi;Yes To Something;No To Everything;Just Cancel;Some random button">
			<c:MessageBoxInfo.Resources>
				<DataTemplate x:Key="templateMbiFromResources_Content">
					<TextBlock>
						<TextBlock FontStyle="Italic" Text="Custom header" TextWrapping="Wrap"/>
						<LineBreak/>
						<TextBlock FontWeight="Bold" Text="{Binding}" TextWrapping="Wrap"/>
					</TextBlock>
				</DataTemplate>

				<DataTemplate x:Key="templateMbiRandomButtons_Footer">
					<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
						<TextBlock Text="{Binding}"/>
						<c:HyperlinkButton Padding="0" Margin="5,0,0,0" Content="Dont Show Again"/>
					</StackPanel>
				</DataTemplate>
			</c:MessageBoxInfo.Resources>
		</c:MessageBoxInfo>

		<c:InputDialogInfo x:Key="inputDialogInfo_AddNewFileItem" ContentType="{x:Type local:FileItem}" ContentTemplateKey="templateInputDialogContent_FileItem" ph:DataContextBridge.SourceScopeName="vm_main" CanPositiveActionExecute="{Binding NewFileItemValidator}">
			<c:InputDialogInfo.Resources>
				<DataTemplate x:Key="templateInputDialogContent_FileItem" DataType="{x:Type local:FileItem}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition/>
						</Grid.ColumnDefinitions>
						<TextBlock Grid.Row="0" Grid.Column="0" HorizontalAlignment="Right" Text="Name:" Margin="10,0" VerticalAlignment="Center"/>
						<TextBox Grid.Row="0" Grid.Column="1" Margin="0,5" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
						<TextBlock Grid.Row="1" Grid.Column="0" HorizontalAlignment="Right" Text="Size:" Margin="10,0" VerticalAlignment="Center"/>
						<tk:IntegerUpDown Grid.Row="1" Grid.Column="1" Margin="0,5" Value="{Binding Size_Mb, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
					</Grid>
				</DataTemplate>
			</c:InputDialogInfo.Resources>
		</c:InputDialogInfo>

		<c:InputDialogInfo x:Key="inputDialogInfo_Search" ph:DataContextBridge.SourceScopeName="vm_main" PositiveActionButtonHeader="Maybe.." NegativeActionButtonHeader="Probably not" ContentTemplateKey="templateInputDialog_Search" Content="{Binding SearchInputDialogViewModel}">
			<c:InputDialogInfo.Resources>
				<DataTemplate x:Key="templateInputDialog_Search">
					<c:SearchAutocompleteControl AutoClear="True" AutoFocusMode="OnLoad" ItemsSource="{Binding SearchResults}" SearchCompleteCommand="{Binding SearchCompleteCommand}" SearchResultRefreshCommand="{Binding RefreshSearchResultsCommand}"/>
				</DataTemplate>
			</c:InputDialogInfo.Resources>
		</c:InputDialogInfo>

		<c:InputDialogInfo x:Key="inputDialogInfo_TextInput" ph:DataContextBridge.SourceScopeName="vm_main" PositiveActionButtonHeader="YES" NegativeActionButtonHeader="NO" CanPositiveActionExecute="{Binding TextInputDialogValidator}" ContentType="{x:Type mvvm:vmTextInputDialog}" ContentTemplateKey="templateInputDialog_TextInput">
			<c:InputDialogInfo.Resources>
				<DataTemplate x:Key="templateInputDialog_TextInput">
					<TextBox Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
				</DataTemplate>
			</c:InputDialogInfo.Resources>
		</c:InputDialogInfo>

		<CollectionViewSource x:Key="sourcePersonalityType">
			<CollectionViewSource.Source>
				<ObjectDataProvider ObjectType="{x:Type msc:Enum}" MethodName="GetValues">
					<ObjectDataProvider.MethodParameters>
						<x:Type TypeName="local:PersonalityType"/>
					</ObjectDataProvider.MethodParameters>
				</ObjectDataProvider>
			</CollectionViewSource.Source>
		</CollectionViewSource>

		<DataTemplate x:Key="templateRemovableItemTest" DataType="{x:Type local:FileItem}">
			<TextBlock VerticalAlignment="Center"><InlineUIContainer>
					<TextBlock Text="{Binding Name}"/>
				</InlineUIContainer></TextBlock>
		</DataTemplate>

		<DataTemplate x:Key="templateRemovableList_CustomContent">
			<Grid>
				<Button Style="{DynamicResource styleButton_AddFile}" Command="{Binding ShowAddNewFileInputDialogCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" CommandParameter="{StaticResource inputDialogInfo_AddNewFileItem}" VerticalAlignment="Top" Margin="0,12,0,0"/>
			</Grid>
		</DataTemplate>

		<Style x:Key="styleRemovableItem_Files1" TargetType="{x:Type c:RemovableItemContentControl}" BasedOn="{StaticResource {x:Type c:RemovableItemContentControl}}">
			<Setter Property="a:ToolTipBeacon.ToolTipContent" Value="{Binding}"/>
			<Setter Property="a:ToolTipBeacon.ToolTipTemplateKey" Value="templateToolTip_RemovableItemContentControl"/>
			<Setter Property="a:ToolTipBeacon.PlacementPriority" Value="Top"/>
		</Style>

		<Style x:Key="styleRemovableItem_Files2" TargetType="{x:Type c:RemovableItemContentControl}" BasedOn="{StaticResource {x:Type c:RemovableItemContentControl}}">
			<Setter Property="a:ToolTipBeacon.ToolTipContent" Value="{Binding}"/>
			<Setter Property="a:ToolTipBeacon.ToolTipTemplateKey" Value="templateToolTip_RemovableItemContentControl_TopPlacement"/>
			<Setter Property="a:ToolTipBeacon.PlacementPriority" Value="Bottom"/>
		</Style>

		<c:DoubleTextModifier x:Key="doubleModifier"/>
	</Window.Resources>

	<Grid>
		<ph:DataContextBridge ScopeName="vm_main"/>

		<c:TabControlEx>
			<TabItem Header="Common Controls">
				<Grid Margin="5">
					<Grid.ColumnDefinitions>
						<ColumnDefinition/>
						<ColumnDefinition/>
						<ColumnDefinition/>
					</Grid.ColumnDefinitions>
					<StackPanel Grid.Column="0">
						<StackPanel.Resources>
							<Style x:Key="styleButton_Cloud" TargetType="Button">
								<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
								<Setter Property="MinWidth" Value="34"></Setter>
								<Setter Property="MinHeight" Value="34"></Setter>
								<Setter Property="Width" Value="34"></Setter>
								<Setter Property="Height" Value="34"></Setter>
								<Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
								<Setter Property="UseLayoutRounding" Value="False"></Setter>
								<Setter Property="SnapsToDevicePixels" Value="False"></Setter>
								<Setter Property="Background" Value="#FF05AB8B"></Setter>
								<Setter Property="Padding" Value="5,5,5,6"></Setter>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="Button">
											<Grid Background="{x:Null}">
												<Ellipse Fill="Transparent"></Ellipse>
												<Grid x:Name="grid">
													<Grid.Effect>
														<DropShadowEffect ShadowDepth="0" Color="#FF000000" Opacity="0.0"></DropShadowEffect>
													</Grid.Effect>
													<Ellipse Stroke="{TemplateBinding Background}" StrokeThickness="1.5"></Ellipse>
													<Path Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Background}" Stretch="Uniform" Data="{DynamicResource geometryIcon_Cloud}"></Path>
												</Grid>
											</Grid>
											<ControlTemplate.Triggers>
												<Trigger Property="IsMouseOver" Value="True">
													<Trigger.EnterActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" From="0.0" To="0.3" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.EnterActions>
													<Trigger.ExitActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" From="0.3" To="0.0" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.ExitActions>
												</Trigger>
												<Trigger Property="IsEnabled" Value="False">
													<Trigger.EnterActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.EnterActions>
													<Trigger.ExitActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.6" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.ExitActions>
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
							<Style x:Key="styleButton_Cloud_Small" TargetType="Button">
								<Setter Property="OverridesDefaultStyle" Value="True"></Setter>
								<Setter Property="MinWidth" Value="18"></Setter>
								<Setter Property="MinHeight" Value="18"></Setter>
								<Setter Property="Width" Value="18"></Setter>
								<Setter Property="Height" Value="18"></Setter>
								<Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
								<Setter Property="UseLayoutRounding" Value="False"></Setter>
								<Setter Property="SnapsToDevicePixels" Value="False"></Setter>
								<Setter Property="Background" Value="#FF05AB8B"></Setter>
								<Setter Property="Padding" Value="3,2,3,3"></Setter>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="Button">
											<Grid Background="{x:Null}">
												<Ellipse Fill="Transparent"></Ellipse>
												<Grid x:Name="grid">
													<Grid.Effect>
														<DropShadowEffect ShadowDepth="0" Color="#FF000000" Opacity="0.0"></DropShadowEffect>
													</Grid.Effect>
													<Ellipse Stroke="{TemplateBinding Background}" StrokeThickness="1.5"></Ellipse>
													<Path Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Background}" Stretch="Uniform" Data="{DynamicResource geometryIcon_Cloud}"></Path>
												</Grid>
											</Grid>
											<ControlTemplate.Triggers>
												<Trigger Property="IsMouseOver" Value="True">
													<Trigger.EnterActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" From="0.0" To="0.3" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.EnterActions>
													<Trigger.ExitActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" From="0.3" To="0.0" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.ExitActions>
												</Trigger>
												<Trigger Property="IsEnabled" Value="False">
													<Trigger.EnterActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.EnterActions>
													<Trigger.ExitActions>
														<BeginStoryboard>
															<Storyboard>
																<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.6" To="1.0" Duration="00:00:00.150"></DoubleAnimation>
															</Storyboard>
														</BeginStoryboard>
													</Trigger.ExitActions>
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</StackPanel.Resources>
						<TextBlock Margin="5">Button "cloud"</TextBlock>
						<StackPanel Orientation="Horizontal">
							<TextBlock VerticalAlignment="Center" Margin="5">Original color from icon AI file:</TextBlock>
							<Button Margin="5" Style="{StaticResource styleButton_Cloud}"></Button>
							<Button Margin="5" Style="{StaticResource styleButton_Cloud_Small}"></Button>
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<TextBlock VerticalAlignment="Center" Margin="5">Default dark green color</TextBlock>
							<Button Margin="5" Style="{StaticResource styleButton_Cloud}" Background="{DynamicResource brushControl_Background_Dark}"></Button>
							<Button Margin="5" Style="{StaticResource styleButton_Cloud_Small}" Background="{DynamicResource brushControl_Background_Dark}"></Button>
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<TextBlock Margin="5" VerticalAlignment="Center">Original "cloud" icon (33x22px)</TextBlock>
							<Path Margin="5" Width="33" Height="22" HorizontalAlignment="Center" Fill="#FF05AB8B" Stretch="Fill" Data="{DynamicResource geometryIcon_Cloud}"></Path>
						</StackPanel>
						<CheckBox Margin="5" IsChecked="{Binding ElementName=windowMain, Path=(h:WindowHelper.AllowResize), Mode=TwoWay}">Allow main window resize</CheckBox>
						<!--<CheckBox Margin="5" IsChecked="{Binding ElementName=windowMain, Path=(ph:ButtonHelper.ConvertToUpper), Mode=TwoWay}">All buttons content to uppercase</CheckBox>-->
						<Button Margin="5" Content="{Binding UpperCaseTestContent}" HorizontalAlignment="Left"></Button>
						<TextBlock FontWeight="Bold" Margin="5"><Run Text="Button"/></TextBlock>
						<Button VerticalAlignment="Top" Margin="5" HorizontalAlignment="Left" Content="insert"/>
						<StackPanel Orientation="Horizontal">
							<Button x:Name="buttonTest" VerticalAlignment="Top" IsEnabled="False" HorizontalAlignment="Left" Margin="5" Content="DisAbLEd"/>
							<CheckBox Margin="24,0,0,0" IsChecked="{Binding IsEnabled, ElementName=buttonTest, Mode=TwoWay}" Content="IsEnabled"/>
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<Button x:Name="buttonLight" Margin="5" Style="{DynamicResource styleButton_Light}" Content="Abort"/>
							<CheckBox Margin="20,0,0,0" IsChecked="{Binding IsEnabled, ElementName=buttonLight, Mode=TwoWay}" Content="IsEnabled"/>
						</StackPanel>
						<Button Margin="5" Style="{DynamicResource styleButton_GoBack}" HorizontalAlignment="Left" />
						<StackPanel Orientation="Horizontal">
							<Button Margin="5" Style="{DynamicResource styleButton_AddFile}"/>
							<Button x:Name="buttonRemoveTest" Margin="0,5,5,5" Style="{DynamicResource styleButton_RemoveFile}"/>
							<CheckBox IsChecked="{Binding IsEnabled, ElementName=buttonRemoveTest, Mode=TwoWay}" Content="IsEnabled"/>
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<c:HyperlinkButton x:Name="hyperlinkTest" Command="{Binding HyperlinkTestCommand}" CommandParameter="{Binding HyperlinkTest}" Content="Hyperlink"/>
							<CheckBox Margin="24,0,0,0" IsChecked="{Binding IsEnabled, ElementName=hyperlinkTest, Mode=TwoWay}" Content="IsEnabled"/>
						</StackPanel>
						<c:HyperlinkButton IsUnderlined="False" HorizontalAlignment="Left" Content="no underline"/>
						<Button Margin="5" HorizontalAlignment="Left" Style="{DynamicResource styleButton_RemoveRequest}"/>
						<StackPanel Orientation="Horizontal">
							<Button x:Name="buttonStar" Style="{DynamicResource styleButton_Star}" Margin="5"/>
							<CheckBox IsChecked="{Binding IsEnabled, ElementName=buttonStar, Mode=TwoWay}" Margin="20,0,0,0" Content="IsEnabled"/>
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<Button x:Name="buttonInfo" Style="{DynamicResource styleButton_Info}" Margin="5"/>
							<CheckBox IsChecked="{Binding IsEnabled, ElementName=buttonInfo, Mode=TwoWay}" Margin="20,0,0,0" Content="IsEnabled"/>
						</StackPanel>
						<TextBlock Margin="5" Text="PasswordBox" FontWeight="Bold"/>
						<StackPanel Orientation="Horizontal" Margin="5">
							<PasswordBox a:PasswordHelper.AttachedController="{Binding UserPasswordController}" MinWidth="150"/>
							<Button Margin="5,0" Command="{Binding UpdateUserPasswordCommand}" Content="OK"/>
						</StackPanel>

						<StackPanel Orientation="Vertical">
							<TextBlock Text="Tool Window" Margin="5"></TextBlock>
							<Button HorizontalAlignment="Left" Margin="5" Command="{Binding SummonToolWindowCommand}">Summon sample tool window</Button>
							<CheckBox IsChecked="{Binding AllowToolWindowResize, Mode=TwoWay}">Allow Resize</CheckBox>
						</StackPanel>
					</StackPanel>

					<StackPanel Grid.Column="1" x:Name="stackPanel_IgnoreUpperCaseButtons" Orientation="Vertical">
						<CheckBox Margin="5" IsChecked="{Binding ElementName=stackPanel_IgnoreUpperCaseButtons, Path=(ph:ButtonHelper.IgnoreConvertToUpper), Mode=TwoWay}">Locally ignore uppercase modifier for buttons</CheckBox>
						<Rectangle Fill="DarkGray" Height="1"/>
						<CheckBox Margin="5" FontSize="9.5pt" Content="CheckBox"/>
						<CheckBox Margin="5" IsEnabled="False" Content="CheckBox (disabled)"/>
						<Rectangle Fill="DarkGray" Height="1"/>
						<RadioButton Margin="5,5,5,3" GroupName="rbtest" IsChecked="True" Content="RadioButton 1 (group: rbtest)"/>
						<RadioButton Margin="5,0,5,5" GroupName="rbtest" Content="RadioButton 2 (group: rbtest)"/>
						<RadioButton Margin="5,0,5,5" IsEnabled="False" Content="RadioButton 3 (disabled)"/>
						<StackPanel Orientation="Horizontal">
							<RadioButton x:Name="radioButtonTest" Margin="5,0,5,5" IsEnabled="False" IsChecked="True" Content="RadioButton 4 (checked/disabled)"/>
							<CheckBox Margin="5,0" IsChecked="{Binding IsEnabled, ElementName=radioButtonTest, Mode=TwoWay}" Content="IsEnabled"/>
						</StackPanel>
						<TextBlock Margin="5"><Run Text="ToggleButton"/></TextBlock>
						<StackPanel Orientation="Horizontal">
							<ToggleButton x:Name="toggleButton" a:ToggleButtonHelper.CheckedContent="Yes" Content="No"/>
							<ToggleButton Margin="20,0,0,0" IsChecked="{Binding IsEnabled, ElementName=toggleButton, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" a:ToggleButtonHelper.CheckedContent="Enabled" Content="Disabled"/>
						</StackPanel>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<ProgressBar Grid.Column="0" Minimum="0" Maximum="100" Value="{Binding ProgressBarValueTest}" Margin="5,0,0,0"/>
							<Button Grid.Column="1" Margin="5,0" Command="{Binding StartProgressTestCommand}" Content="Start"/>
						</Grid>
						<TextBlock Margin="5" FontWeight="Bold"><Run Text="Indeterminate ProgressBar"/></TextBlock>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<ProgressBar Grid.Column="0" Minimum="0" Maximum="100" IsIndeterminate="{Binding IsLongOperationInProgress}" Margin="50,0" ph:ProgressBarAnimationHelper.IndeterminateIndicatorPercentageWidth="0.6"/>
							<Button Grid.Column="1" Margin="5,0" Command="{Binding StartLongOperationCommand}" Content="Start"/>
						</Grid>
						<!--<TextBlock Margin="5" FontWeight="Bold">Long indeterminate progress bar</TextBlock>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"></ColumnDefinition>
						<ColumnDefinition Width="Auto"></ColumnDefinition>
					</Grid.ColumnDefinitions>
					<ProgressBar Grid.Column="0" Minimum="0" Maximum="100" IsIndeterminate="{Binding IsVeryLongOperationInProgress}" Margin="5,0,0,0" ph:ProgressBarAnimationHelper.IndeterminateIndicatorPercentageWidth="0.7"></ProgressBar>
					<Button Grid.Column="1" Margin="5,0" Command="{Binding StartVeryLongOperationCommand}">Start</Button>
				</Grid>-->
						<StackPanel Orientation="Vertical">
							<Slider x:Name="slider1" Margin="5" Minimum="0.0" Maximum="100.0" Value="{Binding SliderValue, Mode=TwoWay}" a:Slider.ValueStringFormat="{}{0:0}%"/>
							<StackPanel Orientation="Horizontal">
								<TextBlock Text="ToolTip format" Margin="5"/>
								<TextBox Margin="5" Text="{Binding (a:Slider.ValueStringFormat), ElementName=slider1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
							</StackPanel>
						</StackPanel>

						<StackPanel Orientation="Vertical">
							<Slider x:Name="slider2" Margin="5" Minimum="0.0" Maximum="100.0" Value="{Binding SliderValue, Mode=TwoWay}" a:Slider.ValueStringFormat="{}{0:#}%"/>
							<StackPanel Orientation="Horizontal">
								<TextBlock Text="ToolTip format" Margin="5"/>
								<TextBox Margin="5" Text="{Binding (a:Slider.ValueStringFormat), ElementName=slider2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
							</StackPanel>
						</StackPanel>
					</StackPanel>

					<ScrollViewer Grid.Column="2" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
						<StackPanel Orientation="Vertical">
							<TextBlock Margin="5" Text="Multiline TextBox (AcceptsReturn=True)"></TextBlock>
							<TextBox x:Name="textBox_Multiline" HorizontalAlignment="Left" AcceptsReturn="True" Height="90" Width="200" Margin="10"></TextBox>
							<CheckBox IsChecked="{Binding ElementName=textBox_Multiline, Path=AcceptsReturn, Mode=TwoWay}" Margin="10,5">AcceptsReturn</CheckBox>

							<TextBlock Margin="5" FontWeight="Bold"><Run Text="CommandTextBox"/></TextBlock>
							<c:CommandTextBox x:Name="commandTextBox" Margin="5" Command="{Binding CommandTextBoxCommand}" ButtonStyle="{DynamicResource styleButton_CommandTextBox_Green}" ButtonContent="REGISTER"/>
							<TextBlock Margin="20,5,5,5"><Run Text="CommandTextBox output:"/><Run Text="{Binding CommandTextBoxString}"/></TextBlock>
							<CheckBox Margin="5,0,5,5" IsChecked="{Binding IsEnabled, ElementName=commandTextBox, Mode=TwoWay}" Content="IsEnabled"/>
							<c:CommandTextBox Margin="5" x:Name="commandTextBox1" ButtonStyle="{DynamicResource styleButton_Arrow_Right}"/>
							<CheckBox Margin="5,0,5,5" IsChecked="{Binding IsEnabled, ElementName=commandTextBox1, Mode=TwoWay}" Content="IsEnabled"/>
							<c:CommandTextBox Margin="5" ButtonStyle="{DynamicResource styleButton_Arrow_Up}"/>
							<c:CommandTextBox Margin="5" ButtonStyle="{DynamicResource styleButton_Cross}"/>
							<TextBlock Margin="5,10,5,5" FontWeight="Bold"><Run Text="CommandTextBox with IsButtonFisible = False:"/></TextBlock>
							<c:CommandTextBox Margin="5" ButtonStyle="{DynamicResource styleButton_Cross}" IsButtonVisible="False"/>
							<Grid Grid.IsSharedSizeScope="True">
								<!--<a:VisualHelper.HeaderTemplate>
									<DataTemplate>
										<TextBlock Text="{Binding}" FontStyle="Italic" FontSize="11pt"></TextBlock>
									</DataTemplate>
								</a:VisualHelper.HeaderTemplate>
								<a:VisualHelper.FooterTemplate>
									<DataTemplate>
										<TextBlock Text="{Binding}" FontStyle="Italic" FontWeight="Bold" FontSize="11pt"></TextBlock>
									</DataTemplate>
								</a:VisualHelper.FooterTemplate>-->
								<Grid.RowDefinitions>
									<RowDefinition/>
									<RowDefinition/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<TextBox Grid.Row="0" a:VisualHelper.Header="Header:" a:VisualHelper.HeaderSharedGroupName="headers_test_group" a:VisualHelper.Footer="ft." Margin="0,5" Text="TextBox" a:VisualHelper.HeaderHorizontalAlignment="Left"/>
								<TextBox Grid.Row="1" a:VisualHelper.Header="Longer header:" a:VisualHelper.HeaderSharedGroupName="headers_test_group" Margin="0,5" IsEnabled="False" Text="TextBox (disabled, no footer group)" a:VisualHelper.HeaderHorizontalAlignment="Left"/>
								<StackPanel Grid.Row="2" Orientation="Vertical" Grid.IsSharedSizeScope="True">
									<TextBox Margin="0,2" Text="TextBox with header 1" a:VisualHelper.HeaderSharedGroupName="headers_test_group2" a:VisualHelper.Header="Header one" a:VisualHelper.FooterSharedGroupName="footers_test_group_2"/>
									<TextBox Margin="0,2" Text="TextBox with header 2" a:VisualHelper.HeaderSharedGroupName="headers_test_group2" a:VisualHelper.Header="Header two" a:VisualHelper.Footer="px" a:VisualHelper.FooterSharedGroupName="footers_test_group_2"/>
									<TextBox Margin="0,2" Text="TextBox with header 3" a:VisualHelper.HeaderSharedGroupName="headers_test_group2" a:VisualHelper.Header="Header three" a:VisualHelper.FooterSharedGroupName="footers_test_group_2"/>
									<TextBox Margin="0,2" Text="TextBox with header four" a:VisualHelper.Header="Header 1 (no shared group)" a:VisualHelper.Footer="atm" a:VisualHelper.FooterSharedGroupName="footers_test_group_2"/>
									<TextBox Margin="0,2" a:VisualHelper.HeaderAlignment="Top" a:VisualHelper.Header="Top Aligned Header" a:VisualHelper.HeaderHorizontalAlignment="Left" Text="TextBox with top aligned header"/>
								</StackPanel>
							</Grid>
						</StackPanel>
					</ScrollViewer>
				</Grid>
			</TabItem>

			<TabItem Header="Item Controls">
				<Grid Margin="5">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="0.3*"/>
						<ColumnDefinition Width="*"/>
					</Grid.ColumnDefinitions>
					<ScrollViewer Grid.Column="0" HorizontalScrollBarVisibility="Disabled">
						<StackPanel Orientation="Vertical">
							<TextBlock Margin="5"><Run Text="CommandListBox"/></TextBlock>
							<c:CommandListBox Command="{Binding CommandListBoxCommand}" ItemsSource="{Binding DateIntervalPresets}"/>
							<TextBlock Margin="20,5,5,5" Text="{Binding SelectedDateIntervalPreset}"/>
							<TextBlock FontWeight="Bold"><Run Text="ItemsControls"/></TextBlock>
							<TextBlock Margin="5"><Run Text="ListBox"/></TextBlock>
							<ListBox x:Name="listBoxTest" Height="150" ItemsSource="{Binding TestItemsSource}"/>
							<CheckBox Margin="3" IsChecked="{Binding IsEnabled, ElementName=listBoxTest, Mode=TwoWay}" Content="IsEnabled"/>
							<TextBlock Margin="5"><Run Text="ComboBox"/></TextBlock>
							<ComboBox x:Name="comboBoxTest" ItemsSource="{Binding TestItemsSource}" />
							<TextBlock Margin="5"><Run Text="ComboBox (light)"/></TextBlock>
							<ComboBox Margin="3" Style="{DynamicResource styleComboBox_Light}" ItemsSource="{Binding TestItemsSource}"/>

							<CheckBox Margin="3" IsChecked="{Binding IsEnabled, ElementName=comboBoxTest, Mode=TwoWay}" Content="IsEnabled"/>

						</StackPanel>
					</ScrollViewer>

					<StackPanel Grid.Column="1" Orientation="Vertical">
						<TextBlock Margin="5" FontWeight="Bold"><Run Text="DataGrid"/></TextBlock>
						<DataGrid Margin="5" x:Name="dataGrid" Height="200" ItemsSource="{Binding PersonsTestSource}" AutoGenerateColumns="False" c:DataGridHelper.MoveRowUpCommandOverride="{Binding PersonItemMoveUpCommand}" c:DataGridHelper.MoveRowDownCommandOverride="{Binding PersonItemMoveDownCommand}" c:DataGridHelper.RemoveRowCommandOverride="{Binding RemovePersonItemCommand}" c:DataGridHelper.ShowDefaultRemoveConfirmation="True" c:DataGridHelper.ShowRowControls="False" c:DataGridHelper.LastColumnFill="False" c:DataGridHelper.DenySelection="True">
							<DataGrid.Columns>
								<DataGridTextColumn Header="Person Name" Binding="{Binding Name, Mode=TwoWay}" ElementStyle="{DynamicResource styleTextBlock_DataGridTextColumn}" EditingElementStyle="{DynamicResource styleTextBox_DataGridTextColumn}"/>
								<DataGridTextColumn Header="Internal Number" IsReadOnly="True" Binding="{Binding InternalNumber}" ElementStyle="{DynamicResource styleTextBlock_DataGridTextColumn}"/>
								<DataGridCheckBoxColumn Header="Has Medical License" IsReadOnly="False" Binding="{Binding IsMedic, Mode=TwoWay}" ElementStyle="{DynamicResource styleCheckBox_DataGridCheckBoxColumn}" EditingElementStyle="{DynamicResource styleCheckBox_DataGridCheckBoxColumn}"/>
								<DataGridComboBoxColumn Header="Personality Type" SelectedItemBinding="{Binding PersonalityType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Source={StaticResource sourcePersonalityType}}" EditingElementStyle="{DynamicResource styleComboBox_DataGridComboBoxColumn}" ElementStyle="{DynamicResource styleComboBox_DataGridComboBoxColumn}"/>
							</DataGrid.Columns>
						</DataGrid>

						<StackPanel Margin="20,5,5,5" Orientation="Horizontal">
							<CheckBox IsChecked="{Binding ElementName=dataGrid, Path=(c:DataGridHelper.ShowRowControls), Mode=TwoWay}" Content="ShowRowControls"/>
							<CheckBox IsChecked="{Binding ElementName=dataGrid, Path=(c:DataGridHelper.LastColumnFill), Mode=TwoWay}" Content="Last column fill"/>
							<CheckBox IsChecked="{Binding ElementName=dataGrid, Path=(c:DataGridHelper.DenySelection), Mode=TwoWay}" Content="Deny row selection"/>
						</StackPanel>

						<StackPanel Orientation="Vertical" VerticalAlignment="Top">
							<TextBlock Margin="5" FontWeight="Bold"><Run Text="Removable items ItemsControl (with item tooltips)"/></TextBlock>
							<c:RemovableItemsItemsControl Margin="5" a:ToolTipBeacon.InheritedGroupName="files" ItemTemplate="{StaticResource templateRemovableItemTest}" ItemsSource="{Binding TestRemovableItemsItemsSource}" a:RemoveRequestHelper.RemoveRequestCommand="{Binding RemoveRequestTestCommand}" a:ItemsControlHelper.Orientation="Horizontal" CustomPartContentTemplate="{StaticResource templateRemovableList_CustomContent}" ItemContainerStyle="{StaticResource styleRemovableItem_Files1}" HorizontalAlignment="Stretch" />
							<!--<c:RemovableItemsItemsControl Margin="0,50,0,0" a:ToolTipBeacon.InheritedGroupName="files2" ItemTemplate="{StaticResource templateRemovableItemTest}" ItemsSource="{Binding TestRemovableItemsItemsSource}" a:ItemsControlHelper.Orientation="Horizontal" a:ToolTipBeacon.PlacementPriority="Top" ItemContainerStyle="{StaticResource styleRemovableItem_Files2}"/>-->
						</StackPanel>
					</StackPanel>
				</Grid>
			</TabItem>

			<TabItem Header="Specialized Controls">
				<Grid Margin="5">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="300"/>
						<ColumnDefinition Width="2.0*"/>
						<ColumnDefinition Width="1.0*"/>
					</Grid.ColumnDefinitions>

					<StackPanel Grid.Column="0" Orientation="Vertical">
						<TextBlock FontWeight="Bold"><Run Text="BusyIndicator"/></TextBlock>
						<StackPanel Orientation="Horizontal">
							<c:BusyIndicator x:Name="busyIndicator" Margin="5"/>
							<CheckBox Margin="15,0,0,0" IsChecked="{Binding IsEnabled, ElementName=busyIndicator, Mode=TwoWay}" Content="IsEnabled"/>
						</StackPanel>
						<TextBlock Margin="5" Text="IntegerUpDown (Xceed)" FontWeight="Bold"/>
						<StackPanel Orientation="Horizontal">
							<tk:IntegerUpDown x:Name="integerUpDown" Margin="5,5,0,5" HorizontalAlignment="Left" Width="80" Value="{Binding IntegerValueTest}" />
							<Grid Margin="15,5,5,5">
								<Grid.RowDefinitions>
									<RowDefinition/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<TextBlock Grid.Row="0" Text="{Binding IntegerValueTest, StringFormat=IntegerValueTest: \{0\}}"/>
								<CheckBox Grid.Row="1" IsChecked="{Binding IsEnabled, ElementName=integerUpDown, Mode=TwoWay}" Content="IsEnabled"/>
							</Grid>
						</StackPanel>

						<TextBlock Margin="5" FontWeight="Bold"><Run Text="MessageBox"/></TextBlock>
						<WrapPanel Orientation="Horizontal">
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{Binding Mbi_Exception}" Content="Simple Exception (OK)"/>
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{Binding Mbi_Question}" Content="Simple Question (Yes/No)"/>
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{Binding Mbi_Warning}" Content="Simple Warning (OK)"/>
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{Binding Mbi_YYNC}" Content="Yes/Yes to All/No/Cancel"/>
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{StaticResource mbiRandomButtons}" Content="Some random message box"/>
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{Binding Mbi_OYNaCR}">Show random message box created in code</Button>
							<Button Margin="2" Command="{Binding ShowMessageBoxCommand}" CommandParameter="{StaticResource mbiFromResources}" Content="From Resources"/>
							<Button Margin="2" Command="{x:Static c:MessageBoxService.ShowCommand}" CommandParameter="{StaticResource mbiFromResources}" Content="Static Show Command"/>
						</WrapPanel>
						<Grid>
							<StackPanel Orientation="Horizontal">
								<Grid x:Name="gridWarning" Width="54" Height="54">
									<Path Fill="#FFF5A623" Stroke="{x:Null}" Stretch="Uniform">
										<Path.Data>
											<PathGeometry Figures="M27,0L54,47 0,47z"></PathGeometry>
										</Path.Data>
									</Path>
									<Path Stretch="Uniform" Data="M30,18L29.3262032,32.4986523 24.6737968,32.4986523 24,18 30,18z M29.8716578,34.9299191L29.8716578,40 24.1604278,40 24.1604278,34.9299191 29.8716578,34.9299191z" Fill="#FF000000" Margin="16,21,16,11" />
								</Grid>

								<Grid x:Name="gridError" Width="54" Height="54">
									<Path Fill="#FFd5283d" Stretch="Fill">
										<Path.Data>
											<EllipseGeometry RadiusX="27" RadiusY="27" Center="25,25">
											</EllipseGeometry>
										</Path.Data>
									</Path>
									<Path Data="{StaticResource geometryCross}" Stretch="Fill" Width="22" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource brushControl_Background_Light}" Stroke="{DynamicResource brushControl_Background_Light}" StrokeThickness="1"></Path>
								</Grid>

								<Grid x:Name="gridInfo" Width="54" Height="54">
									<Path Fill="#FF3f95e2" Stroke="{x:Null}">
										<Path.Data>
											<EllipseGeometry RadiusX="27" RadiusY="27" Center="27,27"></EllipseGeometry>
										</Path.Data>
									</Path>
									<StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
										<Path Data="F1M4,1C5.657,1 7,2.343 7,4 7,5.657 5.657,7 4,7 2.343,7 1,5.657 1,4 1,2.343 2.343,1 4,1z" Fill="#FFffffff" Height="6" Width="6" Stretch="Fill" HorizontalAlignment="Center"/>
										<Path Data="F1M1,1C1,1 1,17 1,17 1,17 5,17 5,17 5,17 5,1 5,1 5,1 1,1 1,1z" Fill="#FFffffff" Height="18" Width="6" HorizontalAlignment="Center" Margin="0,3,0,0" Stretch="Fill"/>
									</StackPanel>
								</Grid>
							</StackPanel>
						</Grid>
						<TextBlock Margin="20,5,0,5"><InlineUIContainer>
								<TextBlock Text="MessageBoxResult:"/>
							</InlineUIContainer><Run Text=" "/><Run Text=" "/><Run Text=" "/><InlineUIContainer>
								<TextBlock Margin="10,0,0,0" Text="{Binding MessageBoxResult}" FontWeight="Bold"/>
							</InlineUIContainer></TextBlock>
						<TextBlock Margin="5" FontWeight="Bold"><Run Text="DatePicker"/></TextBlock>
						<DatePicker x:Name="datePicker" Margin="5" SelectedDate="{Binding DateTimeTest, Mode=TwoWay}" HorizontalAlignment="Left" />
						<StackPanel Orientation="Vertical" Margin="5">
							<c:DateInervalControl SelectedInterval="{Binding SelectedDateInterval, Mode=TwoWay}"/>
							<TextBlock Margin="15,10,0,5" Text="{Binding SelectedDateInterval}"/>
						</StackPanel>
						<TextBlock Margin="5" FontWeight="Bold"><Run Text="TimePicker (Xceed)"/></TextBlock>
						<StackPanel Orientation="Horizontal">
							<tk:TimePicker x:Name="timePicker" Margin="5" HorizontalAlignment="Left" MinWidth="100" Value="{Binding TimeValue, Mode=TwoWay}" StartTime="00:00:00" EndTime="23:59:59" AllowSpin="True" AllowTextInput="True" Minimum="00:00:00" Maximum="23:59:59"/>
							<CheckBox IsChecked="{Binding IsEnabled, ElementName=timePicker, Mode=TwoWay}" Margin="20,0,0,0" Content="IsEnabled"/>
						</StackPanel>
						<TextBlock Margin="5" FontWeight="Bold"><Run Text="DateTimePicker (Xceed)"/></TextBlock>
						<tk:DateTimePicker Margin="5" HorizontalAlignment="Stretch" Value="{Binding SelectedDateTime, Mode=TwoWay}"/>
					</StackPanel>

					<StackPanel Grid.Column="1" Orientation="Vertical">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition/>
								<ColumnDefinition/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<StackPanel Grid.Column="0" Orientation="Vertical">
								<TextBlock Margin="5" FontWeight="Bold"><Run Text="Alignment Editor"/></TextBlock>
								<StackPanel Orientation="Vertical">
									<c:AlignmentEditor x:Name="alignmentEditor1" Margin="5" HorizontalAlignment="Left" VerticalAlignmentValue="{Binding VerticalAlignmentValue, Mode=TwoWay}" HorizontalAlignmentValue="{Binding HorizontalAlignmentValue, Mode=TwoWay}" MarginValue="{Binding MarginValue, Mode=TwoWay}" ShowMarginEditors="True"/>
									<CheckBox Margin="20,0,0,0" VerticalAlignment="Center" IsChecked="{Binding ShowMarginEditors, ElementName=alignmentEditor1, Mode=TwoWay}" Content="ShowMarginEditors"/>
								</StackPanel>
								<TextBlock><Run Text="HorizontalAlignment "/><Run Text=" "/><Run FontWeight="Bold" Text="{Binding HorizontalAlignmentValue}"/><LineBreak/><Run Text="VerticalAlignment "/><Run Text=" "/><Run FontWeight="Bold" Text="{Binding VerticalAlignmentValue}"/><LineBreak/><Run Text="Margin "/><Run Text=" "/><Run Text="{Binding MarginValue}"/></TextBlock>
							</StackPanel>

							<StackPanel Grid.Column="1" Orientation="Vertical" Margin="5">
								<c:AlignmentEditor x:Name="alignmentEditor2" Margin="5" HorizontalAlignment="Left" VerticalAlignment="Top" VerticalAlignmentValue="{Binding VerticalAlignmentValue, Mode=TwoWay}" HorizontalAlignmentValue="{Binding HorizontalAlignmentValue, Mode=TwoWay}" ShowMarginEditors="{Binding ShowMarginEditors, ElementName=alignmentEditor1, Mode=OneWay}" MarginValue="{Binding Margin, ElementName=rectangleAlignmentEditorTest, Mode=TwoWay}"/>
								<CheckBox Margin="5" IsChecked="{Binding IsEnabled, ElementName=alignmentEditor2, Mode=TwoWay}" Content="IsEnabled"/>
								<tk:ColorPicker Margin="5" HorizontalAlignment="Left" SelectedColor="{Binding SelectedColor, Mode=TwoWay}"/>
							</StackPanel>
							<Grid Grid.Row="1" Grid.ColumnSpan="2" Height="200" Width="400">
								<Grid.Background>
									<SolidColorBrush Color="{Binding SelectedColor}"></SolidColorBrush>
								</Grid.Background>
								<Rectangle x:Name="rectangleAlignmentEditorTest" Width="40" Height="30" Fill="Red" VerticalAlignment="{Binding VerticalAlignmentValue, Mode=OneWay}" HorizontalAlignment="{Binding HorizontalAlignmentValue, Mode=OneWay}" Margin="{Binding MarginValue, Mode=TwoWay}"/>
							</Grid>
						</Grid>
					</StackPanel>

					<StackPanel Grid.Column="2" Orientation="Vertical">
						<TextBlock FontWeight="Bold" Margin="5" TextWrapping="Wrap"><Run Text="SearchAutocompleteControl (left-aligned tooltip)"/></TextBlock>
						<c:SearchAutocompleteControl x:Name="searchAutocomplete_String" AutoFocusMode="OnVisible" a:ToolTipBeacon.InheritedGroupName="s_a" a:ToolTipBeacon.ToolTipTemplateKey="templateToolTip_SearchAutoComplete_LeftPlacement" a:ToolTipBeacon.PlacementPriority="Right" SearchResultRefreshCommand="{Binding ConversionSearchResultRefreshCommand}" ItemsSource="{Binding StringSearchResults}" SearchCompleteCommand="{Binding StringSearchCompleteCommand}" NoMatchesButtonCommand="{Binding NoMatchesFoundCommand}" SeeAllOptionsCommand="{Binding SeeMoreSearchOptionsCommand}"/>
						<Button Content="Show search input dialog" Command="{Binding ShowSearchInputBoxCommand}" CommandParameter="{StaticResource inputDialogInfo_Search}" HorizontalAlignment="Left" Margin="10,5,0,10" Style="{DynamicResource styleButton_Light}"/>
						<Label Content="{Binding StringSearchResultInfo}">
							<Label.ContentTemplate>
								<DataTemplate DataType="{x:Type c:SearchResultInfo}">
									<TextBlock><InlineUIContainer>
												<TextBlock><Run Text="String Search Result:"/></TextBlock>
											</InlineUIContainer><LineBreak/><InlineUIContainer>
												<TextBlock x:Name="textBlock_TextPresenter" Text="{Binding SearchResult}" FontWeight="Bold"/>
											</InlineUIContainer></TextBlock>
									<DataTemplate.Triggers>
										<DataTrigger Binding="{Binding ResultKind}" Value="Empty">
											<Setter TargetName="textBlock_TextPresenter" Property="Text" Value="[empty]"/>
										</DataTrigger>
									</DataTemplate.Triggers>
								</DataTemplate>
							</Label.ContentTemplate>
						</Label>
						<CheckBox Margin="3" IsChecked="{Binding IsEnabled, ElementName=searchAutocomplete_String, Mode=TwoWay}" Content="IsEnabled"/>
						<Button Command="{Binding ShowTextInputDialogCommand}" CommandParameter="{StaticResource inputDialogInfo_TextInput}" HorizontalAlignment="Left" Content="Show Text Input Box"/>
						<TextBlock><Run Text="text input box result: "/><Run Text=" "/><Run Text="{Binding TextInputDialogResult}" FontWeight="Bold"/></TextBlock>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"></ColumnDefinition>
								<ColumnDefinition Width="Auto"></ColumnDefinition>
							</Grid.ColumnDefinitions>
							<c:SearchAutocompleteControl Grid.Column="0" x:Name="searchAutocomplete_SearchItem" AutoFocusMode="None" SearchPropertyBindingPath="Description"  SearchResultRefreshCommand="{Binding CustomSearchItemSearchResultRefreshCommand}" ItemsSource="{Binding CustomItemSearchResults}" SearchCompleteCommand="{Binding CustomSearchCompleteCommand}" c:FocusController.AttachedController="{Binding StringSearchAutocompleteFocusController}"/>
							<Button Command="{Binding FocusCustomSearchAutoCompleteControlCommand}" Grid.Column="1">Manual Focus</Button>
						</Grid>
						<Label Content="{Binding CustomItemSearchResult}">
							<Label.ContentTemplate>
								<DataTemplate DataType="{x:Type c:SearchResultInfo}">
									<TextBlock><InlineUIContainer>
												<TextBlock><Run Text="Custom Item Search Result:"/></TextBlock>
											</InlineUIContainer><LineBreak/><InlineUIContainer>
												<TextBlock x:Name="textBlock_TextPresenter" Text="{Binding SearchResult.Name}" FontWeight="Bold"/>
											</InlineUIContainer><LineBreak/><InlineUIContainer>
												<TextBlock Text="{Binding SearchResult.Description}" FontWeight="Normal"/>
											</InlineUIContainer></TextBlock>
									<DataTemplate.Triggers>
										<DataTrigger Binding="{Binding HasResultInstance}" Value="False">
											<Setter TargetName="textBlock_TextPresenter" Property="Text" Value="{Binding SearchResult}"/>
										</DataTrigger>
										<DataTrigger Binding="{Binding ResultKind}" Value="Empty">
											<Setter TargetName="textBlock_TextPresenter" Property="Text" Value="[empty]"/>
										</DataTrigger>
									</DataTemplate.Triggers>
								</DataTemplate>
							</Label.ContentTemplate>
						</Label>
					</StackPanel>
				</Grid>
			</TabItem>

			<TabItem Header="ImageResizeControl">
				<Grid Margin="5">
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto"/>
						<RowDefinition/>
					</Grid.RowDefinitions>
					<StackPanel Grid.Row="0" Orientation="Horizontal">
						<Button Margin="5" Command="{Binding SelectImageSourceCommand}" HorizontalAlignment="Left" VerticalAlignment="Center" Content="Select Image"/>
						<c:ImageResizeControl Margin="5,0" x:Name="imageResizeControl" Target="{Binding ResizeImageSource, Mode=TwoWay}" HorizontalAlignment="Left" BorderBrush="LightGray"/>
						<TextBlock Margin="5" HorizontalAlignment="Left" VerticalAlignment="Center" TextWrapping="Wrap"><Run FontWeight="Bold" Text="Current ResizeInfo:"/><LineBreak/><InlineUIContainer>
								<TextBlock Text="{Binding ResizeInfo, ElementName=imageResizeControl}"/>
							</InlineUIContainer></TextBlock>
					</StackPanel>

					<ScrollViewer Grid.Row="1" Margin="5,10,5,5">
						<Image Source="{Binding ResizeImageSource}" Stretch="None"/>
						<!--<Rectangle Grid.Row="1" Height="{Binding ResizeImageSource.Height}" Width="{Binding ResizeImageSource.Width}"  Stroke="DarkGray" StrokeThickness="1">
							<Rectangle.Fill>
								<ImageBrush ImageSource="{Binding ResizeImageSource}" AlignmentX="Left" AlignmentY="Top" Stretch="None"></ImageBrush>
							</Rectangle.Fill>
						</Rectangle>-->
					</ScrollViewer>
				</Grid>
			</TabItem>

			<TabItem Header="ImageCropControl">
				<Grid >
					<Grid.Resources>

					</Grid.Resources>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto"/>
						<RowDefinition/>
					</Grid.RowDefinitions>
					<StackPanel Grid.Row="0" Orientation="Horizontal">
						<Button HorizontalAlignment="Left" Command="{Binding SelectCropImageSourceCommand}" Content="Open Image"/>
						<TextBlock VerticalAlignment="Center" Margin="20,5,5,5" Text="{Binding ElementName=imageCropControl, Path=OriginalImageSize, StringFormat='Original size: {0}'}"></TextBlock>
						<TextBlock VerticalAlignment="Center" Margin="20,5,5,5" Text="{Binding CropResultRect, StringFormat='Crop result rect: {0}'}"></TextBlock>
					</StackPanel>
					<c:ImageCropControl Grid.Row="1" x:Name="imageCropControl" AutoCrop="False" MinHeight="500" MinWidth="500" SourceFileInfo="{Binding CropImageSourceFileInfo}" Margin="5" SubmitCropResultRectCommand="{Binding CropImageCommand}"/>
				</Grid>
			</TabItem>
		</c:TabControlEx>
		<!--<Rectangle VerticalAlignment="Top" HorizontalAlignment="Left" Width="400" Height="300" Fill="Red">
			<Rectangle.Clip>
				<CombinedGeometry GeometryCombineMode="Exclude">
					<CombinedGeometry.Geometry1>
						<RectangleGeometry Rect="0,0,400,300"></RectangleGeometry>
					</CombinedGeometry.Geometry1>
					<CombinedGeometry.Geometry2>
						<RectangleGeometry Rect="100,100,200,50"></RectangleGeometry>
					</CombinedGeometry.Geometry2>
				</CombinedGeometry>
			</Rectangle.Clip>
		</Rectangle>-->
	</Grid>
</Window>